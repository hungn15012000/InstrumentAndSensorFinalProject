
AVRASM ver. 2.1.30  F:\Instrument and sensor\Final project\Avr\Debug\List\demo.asm Thu Dec 30 11:37:58 2021

F:\Instrument and sensor\Final project\Avr\Debug\List\demo.asm(1086): warning: Register r4 already defined by the .DEF directive
F:\Instrument and sensor\Final project\Avr\Debug\List\demo.asm(1087): warning: Register r5 already defined by the .DEF directive
F:\Instrument and sensor\Final project\Avr\Debug\List\demo.asm(1088): warning: Register r6 already defined by the .DEF directive
F:\Instrument and sensor\Final project\Avr\Debug\List\demo.asm(1089): warning: Register r7 already defined by the .DEF directive
F:\Instrument and sensor\Final project\Avr\Debug\List\demo.asm(1090): warning: Register r8 already defined by the .DEF directive
F:\Instrument and sensor\Final project\Avr\Debug\List\demo.asm(1091): warning: Register r9 already defined by the .DEF directive
F:\Instrument and sensor\Final project\Avr\Debug\List\demo.asm(1092): warning: Register r10 already defined by the .DEF directive
F:\Instrument and sensor\Final project\Avr\Debug\List\demo.asm(1093): warning: Register r11 already defined by the .DEF directive
F:\Instrument and sensor\Final project\Avr\Debug\List\demo.asm(1094): warning: Register r12 already defined by the .DEF directive
F:\Instrument and sensor\Final project\Avr\Debug\List\demo.asm(1095): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.14 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega8
                 ;Program type           : Application
                 ;Clock frequency        : 11.059200 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : float, width, precision
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 256 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega8
                 	#pragma AVRPART MEMORY PROG_FLASH 8192
                 	#pragma AVRPART MEMORY EEPROM 512
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 1024
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x045F
                 	.EQU __DSTACK_SIZE=0x0100
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	RCALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _ext_cnt2x=R4
                 	.DEF _ext_cnt2x_msb=R5
                 	.DEF _ext_cnt4x=R6
                 	.DEF _ext_cnt4x_msb=R7
                 	.DEF _mode=R8
                 	.DEF _mode_msb=R9
                 	.DEF _Kp=R10
                 	.DEF _Kp_msb=R11
                 	.DEF _Ki=R12
                 	.DEF _Ki_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c101      	RJMP __RESET
000001 c12c      	RJMP _ext_int0_isr
000002 c130      	RJMP _ext_int1_isr
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 c166      	RJMP _timer1_capt_isr
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b c130      	RJMP _usart_rx_isr
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
000013 0000      	.DW  0x0000
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000014 0001
000015 000f      	.DB  0x1,0x0,0xF,0x0
000016 000a      	.DB  0xA,0x0
                 
                 _0x3:
F:\Instrument and sensor\Final project\Avr\Debug\List\demo.asm(1134): warning: .cseg .db misalignment - padding zero byte
000017 0001      	.DB  0x1
                 _0x4:
000018 7073
000019 0000
00001a 0000
00001b 0000      	.DB  0x73,0x70,0x0,0x0,0x0,0x0,0x0,0x0
00001c 0000
00001d 0000
00001e 0000
00001f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000020 0000
000021 0000
000022 0000
000023 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000024 0000
000025 0000
000026 0000
000027 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000028 0000
000029 0000
00002a 0000
00002b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00002c 0000
00002d 0000
00002e 0000
00002f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000030 0000
000031 7831
000032 0000
000033 0000      	.DB  0x0,0x0,0x31,0x78,0x0,0x0,0x0,0x0
000034 0000
000035 0000
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000038 0000
000039 0000
00003a 0000
00003b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00003c 0000
00003d 0000
00003e 0000
00003f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000040 0000
000041 0000
000042 0000
000043 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000044 0000
000045 0000
000046 0000
000047 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000048 0000
000049 0000
00004a 7832
00004b 0000      	.DB  0x0,0x0,0x0,0x0,0x32,0x78,0x0,0x0
00004c 0000
00004d 0000
00004e 0000
00004f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000050 0000
000051 0000
000052 0000
000053 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000054 0000
000055 0000
000056 0000
000057 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000058 0000
000059 0000
00005a 0000
00005b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00005c 0000
00005d 0000
00005e 0000
00005f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000060 0000
000061 0000
000062 0000
000063 7834      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x34,0x78
000064 0000
000065 0000
000066 0000
000067 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000068 0000
000069 0000
00006a 0000
00006b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00006c 0000
00006d 0000
00006e 0000
00006f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000070 0000
000071 0000
000072 0000
000073 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000074 0000
000075 0000
000076 0000
000077 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000078 0000
000079 0000
00007a 0000
00007b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00007c 704b
00007d 0000
00007e 0000
00007f 0000      	.DB  0x4B,0x70,0x0,0x0,0x0,0x0,0x0,0x0
000080 0000
000081 0000
000082 0000
000083 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000084 0000
000085 0000
000086 0000
000087 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000088 0000
000089 0000
00008a 0000
00008b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00008c 0000
00008d 0000
00008e 0000
00008f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000090 0000
000091 0000
000092 0000
000093 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
000094 0000
000095 694b
000096 0000
000097 0000      	.DB  0x0,0x0,0x4B,0x69,0x0,0x0,0x0,0x0
000098 0000
000099 0000
00009a 0000
00009b 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
00009c 0000
00009d 0000
00009e 0000
00009f 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000a0 0000
0000a1 0000
0000a2 0000
0000a3 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000a4 0000
0000a5 0000
0000a6 0000
0000a7 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000a8 0000
0000a9 0000
0000aa 0000
0000ab 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000ac 0000
0000ad 0000
0000ae 644b
0000af 0000      	.DB  0x0,0x0,0x0,0x0,0x4B,0x64,0x0,0x0
0000b0 0000
0000b1 0000
0000b2 0000
0000b3 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000b4 0000
0000b5 0000
0000b6 0000
0000b7 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000b8 0000
0000b9 0000
0000ba 0000
0000bb 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000bc 0000
0000bd 0000
0000be 0000
0000bf 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000c0 0000
0000c1 0000
0000c2 0000
0000c3 0000      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0
0000c4 0000
0000c5 0000
0000c6 0000
0000c7 6f6d      	.DB  0x0,0x0,0x0,0x0,0x0,0x0,0x6D,0x6F
0000c8 6564      	.DB  0x64,0x65
                 _0x5:
F:\Instrument and sensor\Final project\Avr\Debug\List\demo.asm(1182): warning: .cseg .db misalignment - padding zero byte
0000c9 0064      	.DB  0x64
                 _0x6:
F:\Instrument and sensor\Final project\Avr\Debug\List\demo.asm(1184): warning: .cseg .db misalignment - padding zero byte
0000ca 0001      	.DB  0x1
                 _0x0:
0000cb 6425
0000cc 002c
0000cd 3525
0000ce 322e      	.DB  0x25,0x64,0x2C,0x0,0x25,0x35,0x2E,0x32
0000cf 2c66
0000d0 2500
0000d1 2c64
0000d2 3525      	.DB  0x66,0x2C,0x0,0x25,0x64,0x2C,0x25,0x35
0000d3 322e
0000d4 2c66
0000d5 3525
0000d6 322e      	.DB  0x2E,0x32,0x66,0x2C,0x25,0x35,0x2E,0x32
0000d7 2066
0000d8 0d0a
0000d9 2500
0000da 2c64      	.DB  0x66,0x20,0xA,0xD,0x0,0x25,0x64,0x2C
0000db 3525
0000dc 322e
0000dd 2c66
0000de 3525      	.DB  0x25,0x35,0x2E,0x32,0x66,0x2C,0x25,0x35
0000df 322e
0000e0 2066
0000e1 0a20
0000e2 000d      	.DB  0x2E,0x32,0x66,0x20,0x20,0xA,0xD,0x0
                 _0x2040060:
F:\Instrument and sensor\Final project\Avr\Debug\List\demo.asm(1193): warning: .cseg .db misalignment - padding zero byte
0000e3 0001      	.DB  0x1
                 _0x2040000:
0000e4 4e2d
0000e5 4e41
0000e6 4900
0000e7 464e      	.DB  0x2D,0x4E,0x41,0x4E,0x0,0x49,0x4E,0x46
F:\Instrument and sensor\Final project\Avr\Debug\List\demo.asm(1196): warning: .cseg .db misalignment - padding zero byte
0000e8 0000      	.DB  0x0
                 _0x2060000:
0000e9 4e2d
0000ea 4e41
F:\Instrument and sensor\Final project\Avr\Debug\List\demo.asm(1198): warning: .cseg .db misalignment - padding zero byte
0000eb 0000      	.DB  0x2D,0x4E,0x41,0x4E,0x0
                 
                 __GLOBAL_INI_TBL:
0000ec 0001      	.DW  0x01
0000ed 0002      	.DW  0x02
0000ee 0026      	.DW  __REG_BIT_VARS*2
                 
0000ef 0006      	.DW  0x06
0000f0 0008      	.DW  0x08
0000f1 0028      	.DW  __REG_VARS*2
                 
0000f2 0001      	.DW  0x01
0000f3 0180      	.DW  _Kd
0000f4 002e      	.DW  _0x3*2
                 
0000f5 0162      	.DW  0x162
0000f6 01ae      	.DW  _function
0000f7 0030      	.DW  _0x4*2
                 
0000f8 0001      	.DW  0x01
0000f9 0352      	.DW  _Ts
0000fa 0192      	.DW  _0x5*2
                 
0000fb 0001      	.DW  0x01
0000fc 035e      	.DW  _func_number
0000fd 0194      	.DW  _0x6*2
                 
0000fe 0001      	.DW  0x01
0000ff 0373      	.DW  __seed_G102
000100 01c6      	.DW  _0x2040060*2
                 
                 _0xFFFFFFFF:
000101 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000102 94f8      	CLI
000103 27ee      	CLR  R30
000104 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000105 e0f1      	LDI  R31,1
000106 bffb      	OUT  GICR,R31
000107 bfeb      	OUT  GICR,R30
000108 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000109 e08d      	LDI  R24,(14-2)+1
00010a e0a2      	LDI  R26,2
00010b 27bb      	CLR  R27
                 __CLEAR_REG:
00010c 93ed      	ST   X+,R30
00010d 958a      	DEC  R24
00010e f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00010f e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000110 e094      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000111 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000112 93ed      	ST   X+,R30
000113 9701      	SBIW R24,1
000114 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000115 ede8      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000116 e0f1      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000117 9185      	LPM  R24,Z+
000118 9195      	LPM  R25,Z+
000119 9700      	SBIW R24,0
00011a f061      	BREQ __GLOBAL_INI_END
00011b 91a5      	LPM  R26,Z+
00011c 91b5      	LPM  R27,Z+
00011d 9005      	LPM  R0,Z+
00011e 9015      	LPM  R1,Z+
00011f 01bf      	MOVW R22,R30
000120 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000121 9005      	LPM  R0,Z+
000122 920d      	ST   X+,R0
000123 9701      	SBIW R24,1
000124 f7e1      	BRNE __GLOBAL_INI_LOOP
000125 01fb      	MOVW R30,R22
000126 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000127 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000128 bfed      	OUT  SPL,R30
000129 e0e4      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00012a bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00012b e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
00012c e0d1      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
00012d c073      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x160
                 
                 	.CSEG
                 ;/*******************************************************
                 ;This program was created by the
                 ;CodeWizardAVR V3.14 Advanced
                 ;Automatic Program Generator
                 ;� Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 ;
                 ;Project :
                 ;Version :
                 ;Date    : 12/14/2021
                 ;Author  :
                 ;Company :
                 ;Comments:
                 ;
                 ;
                 ;Chip type               : ATmega8
                 ;Program type            : Application
                 ;AVR Core Clock frequency: 11.059200 MHz
                 ;Memory model            : Small
                 ;External RAM size       : 0
                 ;Data Stack size         : 256
                 ;*******************************************************/
                 ;
                 ;#include <mega8.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <math.h>
                 ;#include <delay.h>
                 ;#include <string.h>
                 ;#include <stdlib.h>
                 ;#include <stdio.h>
                 ;#define min 10
                 ;#define max 255
                 ;// Declare your global variables here
                 ;unsigned ext_cnt2x, ext_cnt4x;
                 ;unsigned int mode = 1;
                 ;float error, pre_error, Pout, Iout, Dout, out, integral, derivative;
                 ;int Kp = 15, Ki = 10, Kd = 1;
                 
                 	.DSEG
                 ;long ADC_val_0 = 0,ADC_val_1 = 0;
                 ;float Volt_0 = 0, Weight_0 = 0, Volt_1 = 0, Weight_1 = 0;
                 ;char str2[20];
                 ;char function[8][50] ={
                 ;            "sp",
                 ;            "1x",
                 ;            "2x",
                 ;            "4x",
                 ;            "Kp",
                 ;            "Ki",
                 ;            "Kd",
                 ;            "mode"
                 ;            };
                 ;int number;
                 ;int i,j,k,l,m;
                 ;float spd1, spd2, spd3, spd4;
                 ;long Ts = 100;
                 ;int cmd ;
                 ;float output;
                 ;int func_prevnumber, func_number =1;
                 ;long timer_cnt, capture_pulse;
                 ;// External Interrupt 0 service routine
                 ;interrupt [EXT_INT0] void ext_int0_isr(void)
                 ; 0000 003C {
                 
                 	.CSEG
                 _ext_int0_isr:
                 ; .FSTART _ext_int0_isr
00012e d699      	RCALL SUBOPT_0x0
                 ; 0000 003D // Place your code here
                 ; 0000 003E ext_cnt2x++;
00012f 01f2      	MOVW R30,R4
000130 9631      	ADIW R30,1
000131 012f      	MOVW R4,R30
                 ; 0000 003F ext_cnt4x++;
000132 c001      	RJMP _0x3E
                 ; 0000 0040 }
                 ; .FEND
                 ;
                 ;// External Interrupt 1 service routine
                 ;interrupt [EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0044 {
                 _ext_int1_isr:
                 ; .FSTART _ext_int1_isr
000133 d694      	RCALL SUBOPT_0x0
                 ; 0000 0045 // Place your code here
                 ; 0000 0046 ext_cnt4x++;
                 _0x3E:
000134 01f3      	MOVW R30,R6
000135 9631      	ADIW R30,1
000136 013f      	MOVW R6,R30
                 ; 0000 0047 }
000137 91e9      	LD   R30,Y+
000138 bfef      	OUT  SREG,R30
000139 91f9      	LD   R31,Y+
00013a 91e9      	LD   R30,Y+
00013b 9518      	RETI
                 ; .FEND
                 ;
                 ;#define DATA_REGISTER_EMPTY (1<<UDRE)
                 ;#define RX_COMPLETE (1<<RXC)
                 ;#define FRAMING_ERROR (1<<FE)
                 ;#define PARITY_ERROR (1<<UPE)
                 ;#define DATA_OVERRUN (1<<DOR)
                 ;
                 ;// USART Receiver buffer
                 ;#define RX_BUFFER_SIZE 8
                 ;char rx_buffer[RX_BUFFER_SIZE];
                 ;
                 ;#if RX_BUFFER_SIZE <= 256
                 ;unsigned char rx_wr_index=0,rx_rd_index=0;
                 ;#else
                 ;unsigned int rx_wr_index=0,rx_rd_index=0;
                 ;#endif
                 ;
                 ;#if RX_BUFFER_SIZE < 256
                 ;unsigned char rx_counter=0;
                 ;#else
                 ;unsigned int rx_counter=0;
                 ;#endif
                 ;
                 ;// This flag is set on USART Receiver buffer overflow
                 ;bit rx_buffer_overflow;
                 ;
                 ;// USART Receiver interrupt service routine
                 ;interrupt [USART_RXC] void usart_rx_isr(void)
                 ; 0000 0064 {
                 _usart_rx_isr:
                 ; .FSTART _usart_rx_isr
00013c 93aa      	ST   -Y,R26
00013d 93ea      	ST   -Y,R30
00013e 93fa      	ST   -Y,R31
00013f b7ef      	IN   R30,SREG
000140 93ea      	ST   -Y,R30
                 ; 0000 0065 char status,data;
                 ; 0000 0066 status=UCSRA;
000141 db76      	RCALL __SAVELOCR2
                 ;	status -> R17
                 ;	data -> R16
000142 b11b      	IN   R17,11
                 ; 0000 0067 data=UDR;
000143 b10c      	IN   R16,12
                 ; 0000 0068 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
000144 2fe1      	MOV  R30,R17
000145 71ec      	ANDI R30,LOW(0x1C)
000146 f4e9      	BRNE _0x7
                 ; 0000 0069    {
                 ; 0000 006A    rx_buffer[rx_wr_index++]=data;
000147 91e0 0370 	LDS  R30,_rx_wr_index
000149 5fef      	SUBI R30,-LOW(1)
00014a 93e0 0370 	STS  _rx_wr_index,R30
00014c 50e1      	SUBI R30,LOW(1)
00014d e0f0      	LDI  R31,0
00014e 59e8      	SUBI R30,LOW(-_rx_buffer)
00014f 4ffc      	SBCI R31,HIGH(-_rx_buffer)
000150 8300      	ST   Z,R16
                 ; 0000 006B #if RX_BUFFER_SIZE == 256
                 ; 0000 006C    // special case for receiver buffer size=256
                 ; 0000 006D    if (++rx_counter == 0) rx_buffer_overflow=1;
                 ; 0000 006E #else
                 ; 0000 006F    if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
000151 91a0 0370 	LDS  R26,_rx_wr_index
000153 30a8      	CPI  R26,LOW(0x8)
000154 f419      	BRNE _0x8
000155 e0e0      	LDI  R30,LOW(0)
000156 93e0 0370 	STS  _rx_wr_index,R30
                 ; 0000 0070    if (++rx_counter == RX_BUFFER_SIZE)
                 _0x8:
000158 91a0 0372 	LDS  R26,_rx_counter
00015a 5faf      	SUBI R26,-LOW(1)
00015b 93a0 0372 	STS  _rx_counter,R26
00015d 30a8      	CPI  R26,LOW(0x8)
00015e f429      	BRNE _0x9
                 ; 0000 0071       {
                 ; 0000 0072       rx_counter=0;
00015f e0e0      	LDI  R30,LOW(0)
000160 93e0 0372 	STS  _rx_counter,R30
                 ; 0000 0073       rx_buffer_overflow=1;
000162 9468      	SET
000163 f820      	BLD  R2,0
                 ; 0000 0074       }
                 ; 0000 0075 #endif
                 ; 0000 0076    }
                 _0x9:
                 ; 0000 0077 }
                 _0x7:
000164 9109      	LD   R16,Y+
000165 9119      	LD   R17,Y+
000166 91e9      	LD   R30,Y+
000167 bfef      	OUT  SREG,R30
000168 91f9      	LD   R31,Y+
000169 91e9      	LD   R30,Y+
00016a 91a9      	LD   R26,Y+
00016b 9518      	RETI
                 ; .FEND
                 ;
                 ;#ifndef _DEBUG_TERMINAL_IO_
                 ;// Get a character from the USART Receiver buffer
                 ;#define _ALTERNATE_GETCHAR_
                 ;#pragma used+
                 ;char getchar(void)
                 ; 0000 007E {
                 ; 0000 007F char data;
                 ; 0000 0080 while (rx_counter==0);
                 ;	data -> R17
                 ; 0000 0081 data=rx_buffer[rx_rd_index++];
                 ; 0000 0082 #if RX_BUFFER_SIZE != 256
                 ; 0000 0083 if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
                 ; 0000 0084 #endif
                 ; 0000 0085 #asm("cli")
                 ; 0000 0086 --rx_counter;
                 ; 0000 0087 #asm("sei")
                 ; 0000 0088 return data;
                 ; 0000 0089 }
                 ;#pragma used-
                 ;#endif
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;float PID_controller(float setpoint, float input);
                 ;int compare ();
                 ;void substring(const char *str1, int pos1, int pos2);
                 ;int startwith(const char *pre, const char *str);
                 ;void Function1x();
                 ;void Function2x();
                 ;void Function4x();
                 ;void Kp_function(int Kp_new);
                 ;void Ki_function(int Ki_new);
                 ;void Kd_function(int Kd_new);
                 ;void SetPoint(int Ref);
                 ;void mode_function(int mode_number);
                 ;// Timer1 input capture interrupt service routine.
                 ;interrupt [TIM1_CAPT] void timer1_capt_isr(void)
                 ; 0000 009D {
                 _timer1_capt_isr:
                 ; .FSTART _timer1_capt_isr
00016c 936a      	ST   -Y,R22
00016d 937a      	ST   -Y,R23
00016e 93aa      	ST   -Y,R26
00016f 93ba      	ST   -Y,R27
000170 93ea      	ST   -Y,R30
000171 93fa      	ST   -Y,R31
000172 b7ef      	IN   R30,SREG
000173 93ea      	ST   -Y,R30
                 ; 0000 009E // Place your code here
                 ; 0000 009F    timer_cnt = TCNT1;
000174 b5ec      	IN   R30,0x2C
000175 b5fd      	IN   R31,0x2C+1
000176 d656      	RCALL SUBOPT_0x1
000177 93e0 0360 	STS  _timer_cnt,R30
000179 93f0 0361 	STS  _timer_cnt+1,R31
00017b 9360 0362 	STS  _timer_cnt+2,R22
00017d 9370 0363 	STS  _timer_cnt+3,R23
                 ; 0000 00A0    TCNT1 = 0;
00017f e0e0      	LDI  R30,LOW(0)
000180 e0f0      	LDI  R31,HIGH(0)
000181 bdfd      	OUT  0x2C+1,R31
000182 bdec      	OUT  0x2C,R30
                 ; 0000 00A1    capture_pulse++;
000183 e6a4      	LDI  R26,LOW(_capture_pulse)
000184 e0b3      	LDI  R27,HIGH(_capture_pulse)
000185 daf1      	RCALL __GETD1P_INC
                +
000186 5fef     +SUBI R30 , LOW ( - 1 )
000187 4fff     +SBCI R31 , HIGH ( - 1 )
000188 4f6f     +SBCI R22 , BYTE3 ( - 1 )
000189 4f7f     +SBCI R23 , BYTE4 ( - 1 )
                 	__SUBD1N -1
00018a daf1      	RCALL __PUTDP1_DEC
                 ; 0000 00A2 }
00018b 91e9      	LD   R30,Y+
00018c bfef      	OUT  SREG,R30
00018d 91f9      	LD   R31,Y+
00018e 91e9      	LD   R30,Y+
00018f 91b9      	LD   R27,Y+
000190 91a9      	LD   R26,Y+
000191 9179      	LD   R23,Y+
000192 9169      	LD   R22,Y+
000193 9518      	RETI
                 ; .FEND
                 ;
                 ;// Voltage Reference: AREF pin
                 ;#define ADC_VREF_TYPE ((0<<REFS1) | (0<<REFS0) | (0<<ADLAR))
                 ;
                 ;// Read the AD conversion result
                 ;unsigned int read_adc(unsigned char adc_input)
                 ; 0000 00A9 {
                 _read_adc:
                 ; .FSTART _read_adc
                 ; 0000 00AA ADMUX=adc_input | ADC_VREF_TYPE;
000194 93aa      	ST   -Y,R26
                 ;	adc_input -> Y+0
000195 81e8      	LD   R30,Y
000196 b9e7      	OUT  0x7,R30
                 ; 0000 00AB // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 00AC delay_us(10);
                +
000197 e285     +LDI R24 , LOW ( 37 )
                +__DELAY_USB_LOOP :
000198 958a     +DEC R24
000199 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 37
                 ; 0000 00AD // Start the AD conversion
                 ; 0000 00AE ADCSRA|=(1<<ADSC);
00019a 9a36      	SBI  0x6,6
                 ; 0000 00AF // Wait for the AD conversion to complete
                 ; 0000 00B0 while ((ADCSRA & (1<<ADIF))==0);
                 _0xE:
00019b 9b34      	SBIS 0x6,4
00019c cffe      	RJMP _0xE
                 ; 0000 00B1 ADCSRA|=(1<<ADIF);
00019d 9a34      	SBI  0x6,4
                 ; 0000 00B2 return ADCW;
00019e b1e4      	IN   R30,0x4
00019f b1f5      	IN   R31,0x4+1
0001a0 c383      	RJMP _0x20A0002
                 ; 0000 00B3 }
                 ; .FEND
                 ;
                 ;void main(void)
                 ; 0000 00B6 {
                 _main:
                 ; .FSTART _main
                 ; 0000 00B7 // Declare your local variables here
                 ; 0000 00B8 
                 ; 0000 00B9 
                 ; 0000 00BA // Input/Output Ports initialization
                 ; 0000 00BB // Port B initialization
                 ; 0000 00BC // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=In Bit1=In Bit0=In
                 ; 0000 00BD DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (1<<DDB3) | (0<<DDB2) | (0<<DDB1) | (0<<DDB0);
0001a1 e0e8      	LDI  R30,LOW(8)
0001a2 bbe7      	OUT  0x17,R30
                 ; 0000 00BE // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=0 Bit2=T Bit1=T Bit0=T
                 ; 0000 00BF PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (0<<PORTB1) | (0<<PORTB0);
0001a3 e0e0      	LDI  R30,LOW(0)
0001a4 bbe8      	OUT  0x18,R30
                 ; 0000 00C0 
                 ; 0000 00C1 // Port C initialization
                 ; 0000 00C2 // Function: Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00C3 DDRC=(0<<DDC6) | (0<<DDC5) | (0<<DDC4) | (0<<DDC3) | (0<<DDC2) | (0<<DDC1) | (0<<DDC0);
0001a5 bbe4      	OUT  0x14,R30
                 ; 0000 00C4 // State: Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00C5 PORTC=(0<<PORTC6) | (0<<PORTC5) | (0<<PORTC4) | (0<<PORTC3) | (0<<PORTC2) | (0<<PORTC1) | (0<<PORTC0);
0001a6 bbe5      	OUT  0x15,R30
                 ; 0000 00C6 
                 ; 0000 00C7 // Port D initialization
                 ; 0000 00C8 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00C9 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (0<<DDD3) | (0<<DDD2) | (0<<DDD1) | (0<<DDD0);
0001a7 bbe1      	OUT  0x11,R30
                 ; 0000 00CA // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00CB PORTD=(0<<PORTD7) | (0<<PORTD6) | (0<<PORTD5) | (0<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0001a8 bbe2      	OUT  0x12,R30
                 ; 0000 00CC 
                 ; 0000 00CD // Timer/Counter 0 initialization
                 ; 0000 00CE // Clock source: System Clock
                 ; 0000 00CF // Clock value: Timer 0 Stopped
                 ; 0000 00D0 TCCR0=(0<<CS02) | (0<<CS01) | (0<<CS00);
0001a9 bfe3      	OUT  0x33,R30
                 ; 0000 00D1 TCNT0=0x00;
0001aa bfe2      	OUT  0x32,R30
                 ; 0000 00D2 
                 ; 0000 00D3 // Timer/Counter 1 initialization
                 ; 0000 00D4 // Clock source: System Clock
                 ; 0000 00D5 // Clock value: 1382.400 kHz
                 ; 0000 00D6 // Mode: Normal top=0xFFFF
                 ; 0000 00D7 // OC1A output: Disconnected
                 ; 0000 00D8 // OC1B output: Disconnected
                 ; 0000 00D9 // Noise Canceler: On
                 ; 0000 00DA // Input Capture on Rising Edge
                 ; 0000 00DB // Timer Period: 47.407 ms
                 ; 0000 00DC // Timer1 Overflow Interrupt: Off
                 ; 0000 00DD // Input Capture Interrupt: On
                 ; 0000 00DE // Compare A Match Interrupt: Off
                 ; 0000 00DF // Compare B Match Interrupt: Off
                 ; 0000 00E0 TCCR1A=(0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0) | (0<<WGM11) | (0<<WGM10);
0001ab bdef      	OUT  0x2F,R30
                 ; 0000 00E1 TCCR1B=(1<<ICNC1) | (1<<ICES1) | (0<<WGM13) | (0<<WGM12) | (0<<CS12) | (1<<CS11) | (0<<CS10);
0001ac ece2      	LDI  R30,LOW(194)
0001ad bdee      	OUT  0x2E,R30
                 ; 0000 00E2 TCNT1H=0x00;
0001ae e0e0      	LDI  R30,LOW(0)
0001af bded      	OUT  0x2D,R30
                 ; 0000 00E3 TCNT1L=0x00;
0001b0 bdec      	OUT  0x2C,R30
                 ; 0000 00E4 ICR1H=0x00;
0001b1 bde7      	OUT  0x27,R30
                 ; 0000 00E5 ICR1L=0x00;
0001b2 bde6      	OUT  0x26,R30
                 ; 0000 00E6 OCR1AH=0x00;
0001b3 bdeb      	OUT  0x2B,R30
                 ; 0000 00E7 OCR1AL=0x00;
0001b4 bdea      	OUT  0x2A,R30
                 ; 0000 00E8 OCR1BH=0x00;
0001b5 bde9      	OUT  0x29,R30
                 ; 0000 00E9 OCR1BL=0x00;
0001b6 bde8      	OUT  0x28,R30
                 ; 0000 00EA 
                 ; 0000 00EB // Timer/Counter 2 initialization
                 ; 0000 00EC // Clock source: System Clock
                 ; 0000 00ED // Clock value: 345.600 kHz
                 ; 0000 00EE // Mode: Fast PWM top=0xFF
                 ; 0000 00EF // OC2 output: Non-Inverted PWM
                 ; 0000 00F0 // Timer Period: 0.74074 ms
                 ; 0000 00F1 // Output Pulse(s):
                 ; 0000 00F2 // OC2 Period: 0.74074 ms Width: 0.14815 ms
                 ; 0000 00F3 ASSR=0<<AS2;
0001b7 bde2      	OUT  0x22,R30
                 ; 0000 00F4 TCCR2=(1<<PWM2) | (1<<COM21) | (0<<COM20) | (1<<CTC2) | (0<<CS22) | (1<<CS21) | (1<<CS20);
0001b8 e6eb      	LDI  R30,LOW(107)
0001b9 bde5      	OUT  0x25,R30
                 ; 0000 00F5 TCNT2=0x00;
0001ba e0e0      	LDI  R30,LOW(0)
0001bb bde4      	OUT  0x24,R30
                 ; 0000 00F6 OCR2=0x33;
0001bc e3e3      	LDI  R30,LOW(51)
0001bd bde3      	OUT  0x23,R30
                 ; 0000 00F7 
                 ; 0000 00F8 // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00F9 TIMSK=(0<<OCIE2) | (0<<TOIE2) | (1<<TICIE1) | (0<<OCIE1A) | (0<<OCIE1B) | (0<<TOIE1) | (0<<TOIE0);
0001be e2e0      	LDI  R30,LOW(32)
0001bf bfe9      	OUT  0x39,R30
                 ; 0000 00FA 
                 ; 0000 00FB // External Interrupt(s) initialization
                 ; 0000 00FC // INT0: On
                 ; 0000 00FD // INT0 Mode: Any change
                 ; 0000 00FE // INT1: On
                 ; 0000 00FF // INT1 Mode: Any change
                 ; 0000 0100 GICR|=(1<<INT1) | (1<<INT0);
0001c0 b7eb      	IN   R30,0x3B
0001c1 6ce0      	ORI  R30,LOW(0xC0)
0001c2 bfeb      	OUT  0x3B,R30
                 ; 0000 0101 MCUCR=(0<<ISC11) | (1<<ISC10) | (0<<ISC01) | (1<<ISC00);
0001c3 e0e5      	LDI  R30,LOW(5)
0001c4 bfe5      	OUT  0x35,R30
                 ; 0000 0102 GIFR=(1<<INTF1) | (1<<INTF0);
0001c5 ece0      	LDI  R30,LOW(192)
0001c6 bfea      	OUT  0x3A,R30
                 ; 0000 0103 
                 ; 0000 0104 // USART initialization
                 ; 0000 0105 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 0106 // USART Receiver: On
                 ; 0000 0107 // USART Transmitter: On
                 ; 0000 0108 // USART Mode: Asynchronous
                 ; 0000 0109 // USART Baud Rate: 9600
                 ; 0000 010A UCSRA=(0<<RXC) | (0<<TXC) | (0<<UDRE) | (0<<FE) | (0<<DOR) | (0<<UPE) | (0<<U2X) | (0<<MPCM);
0001c7 e0e0      	LDI  R30,LOW(0)
0001c8 b9eb      	OUT  0xB,R30
                 ; 0000 010B UCSRB=(1<<RXCIE) | (0<<TXCIE) | (0<<UDRIE) | (1<<RXEN) | (1<<TXEN) | (0<<UCSZ2) | (0<<RXB8) | (0<<TXB8);
0001c9 e9e8      	LDI  R30,LOW(152)
0001ca b9ea      	OUT  0xA,R30
                 ; 0000 010C UCSRC=(1<<URSEL) | (0<<UMSEL) | (0<<UPM1) | (0<<UPM0) | (0<<USBS) | (1<<UCSZ1) | (1<<UCSZ0) | (0<<UCPOL);
0001cb e8e6      	LDI  R30,LOW(134)
0001cc bde0      	OUT  0x20,R30
                 ; 0000 010D UBRRH=0x00;
0001cd e0e0      	LDI  R30,LOW(0)
0001ce bde0      	OUT  0x20,R30
                 ; 0000 010E UBRRL=0x47;
0001cf e4e7      	LDI  R30,LOW(71)
0001d0 b9e9      	OUT  0x9,R30
                 ; 0000 010F 
                 ; 0000 0110 // Analog Comparator initialization
                 ; 0000 0111 // Analog Comparator: Off
                 ; 0000 0112 // The Analog Comparator's positive input is
                 ; 0000 0113 // connected to the AIN0 pin
                 ; 0000 0114 // The Analog Comparator's negative input is
                 ; 0000 0115 // connected to the AIN1 pin
                 ; 0000 0116 ACSR=(1<<ACD) | (0<<ACBG) | (0<<ACO) | (0<<ACI) | (0<<ACIE) | (0<<ACIC) | (0<<ACIS1) | (0<<ACIS0);
0001d1 e8e0      	LDI  R30,LOW(128)
0001d2 b9e8      	OUT  0x8,R30
                 ; 0000 0117 
                 ; 0000 0118 // ADC initialization
                 ; 0000 0119 // ADC Clock frequency: 691.200 kHz
                 ; 0000 011A // ADC Voltage Reference: AREF pin
                 ; 0000 011B ADMUX=ADC_VREF_TYPE;
0001d3 e0e0      	LDI  R30,LOW(0)
0001d4 b9e7      	OUT  0x7,R30
                 ; 0000 011C ADCSRA=(1<<ADEN) | (0<<ADSC) | (0<<ADFR) | (0<<ADIF) | (0<<ADIE) | (1<<ADPS2) | (0<<ADPS1) | (0<<ADPS0);
0001d5 e8e4      	LDI  R30,LOW(132)
0001d6 b9e6      	OUT  0x6,R30
                 ; 0000 011D SFIOR=(0<<ACME);
0001d7 e0e0      	LDI  R30,LOW(0)
0001d8 bfe0      	OUT  0x30,R30
                 ; 0000 011E 
                 ; 0000 011F // SPI initialization
                 ; 0000 0120 // SPI disabled
                 ; 0000 0121 SPCR=(0<<SPIE) | (0<<SPE) | (0<<DORD) | (0<<MSTR) | (0<<CPOL) | (0<<CPHA) | (0<<SPR1) | (0<<SPR0);
0001d9 b9ed      	OUT  0xD,R30
                 ; 0000 0122 
                 ; 0000 0123 // TWI initialization
                 ; 0000 0124 // TWI disabled
                 ; 0000 0125 TWCR=(0<<TWEA) | (0<<TWSTA) | (0<<TWSTO) | (0<<TWEN) | (0<<TWIE);
0001da bfe6      	OUT  0x36,R30
                 ; 0000 0126 
                 ; 0000 0127 // Global enable interrupts
                 ; 0000 0128 #asm("sei")
0001db 9478      	sei
                 ; 0000 0129 
                 ; 0000 012A while (1)
                 _0x11:
                 ; 0000 012B       {
                 ; 0000 012C       // Place your code here
                 ; 0000 012D          delay_ms(100);
0001dc e6a4      	LDI  R26,LOW(100)
0001dd e0b0      	LDI  R27,0
0001de d828      	RCALL _delay_ms
                 ; 0000 012E          // ADC_val_0 = read_adc(0);
                 ; 0000 012F          // Volt_0 = ADC_val_0*5/1023.0;
                 ; 0000 0130          // Weight = (Volt_0/0.05);
                 ; 0000 0131          // printf("%d,%5.2f,%7.4f  \n\r", ADC_val_0, Volt_0, Weight);
                 ; 0000 0132          if(rx_buffer_overflow)
0001df fe20      	SBRS R2,0
0001e0 c01c      	RJMP _0x14
                 ; 0000 0133          {
                 ; 0000 0134              rx_buffer_overflow = 0;
0001e1 94e8      	CLT
0001e2 f820      	BLD  R2,0
                 ; 0000 0135             func_prevnumber = compare();
0001e3 d0cb      	RCALL _compare
0001e4 93e0 035c 	STS  _func_prevnumber,R30
0001e6 93f0 035d 	STS  _func_prevnumber+1,R31
                 ; 0000 0136             if( func_prevnumber > 0 && func_number < 4 )
0001e8 91a0 035c 	LDS  R26,_func_prevnumber
0001ea 91b0 035d 	LDS  R27,_func_prevnumber+1
0001ec dac3      	RCALL __CPW02
0001ed f434      	BRGE _0x16
0001ee 91a0 035e 	LDS  R26,_func_number
0001f0 91b0 035f 	LDS  R27,_func_number+1
0001f2 9714      	SBIW R26,4
0001f3 f00c      	BRLT _0x17
                 _0x16:
0001f4 c008      	RJMP _0x15
                 _0x17:
                 ; 0000 0137             {
                 ; 0000 0138              func_number = func_prevnumber;
0001f5 91e0 035c 	LDS  R30,_func_prevnumber
0001f7 91f0 035d 	LDS  R31,_func_prevnumber+1
0001f9 93e0 035e 	STS  _func_number,R30
0001fb 93f0 035f 	STS  _func_number+1,R31
                 ; 0000 0139             }
                 ; 0000 013A          }
                 _0x15:
                 ; 0000 013B          switch(func_number)
                 _0x14:
0001fd 91e0 035e 	LDS  R30,_func_number
0001ff 91f0 035f 	LDS  R31,_func_number+1
                 ; 0000 013C          {
                 ; 0000 013D             case  1: Function1x();
000201 30e1      	CPI  R30,LOW(0x1)
000202 e0a0      	LDI  R26,HIGH(0x1)
000203 07fa      	CPC  R31,R26
000204 f411      	BRNE _0x1B
000205 d135      	RCALL _Function1x
                 ; 0000 013E                break;
000206 c00b      	RJMP _0x1A
                 ; 0000 013F             case  2: Function2x();
                 _0x1B:
000207 30e2      	CPI  R30,LOW(0x2)
000208 e0a0      	LDI  R26,HIGH(0x2)
000209 07fa      	CPC  R31,R26
00020a f411      	BRNE _0x1C
00020b d164      	RCALL _Function2x
                 ; 0000 0140                break;
00020c c005      	RJMP _0x1A
                 ; 0000 0141             case  3: Function4x();
                 _0x1C:
00020d 30e3      	CPI  R30,LOW(0x3)
00020e e0a0      	LDI  R26,HIGH(0x3)
00020f 07fa      	CPC  R31,R26
000210 f409      	BRNE _0x1A
000211 d18e      	RCALL _Function4x
                 ; 0000 0142          }
                 _0x1A:
                 ; 0000 0143       }
000212 cfc9      	RJMP _0x11
                 ; 0000 0144 }
                 _0x1E:
000213 cfff      	RJMP _0x1E
                 ; .FEND
                 ;
                 ;float PID_controller(float setpoint, float input)
                 ; 0000 0147 {
                 _PID_controller:
                 ; .FSTART _PID_controller
                 ; 0000 0148    error = setpoint - input;
000214 d5bb      	RCALL SUBOPT_0x2
                 ;	setpoint -> Y+4
                 ;	input -> Y+0
000215 d5bd      	RCALL SUBOPT_0x3
000216 d899      	RCALL __SUBF12
000217 93e0 0160 	STS  _error,R30
000219 93f0 0161 	STS  _error+1,R31
00021b 9360 0162 	STS  _error+2,R22
00021d 9370 0163 	STS  _error+3,R23
                 ; 0000 0149    Pout = Kp * error;
00021f d5b8      	RCALL SUBOPT_0x4
000220 01d5      	MOVW R26,R10
000221 d5bf      	RCALL SUBOPT_0x5
000222 93e0 0168 	STS  _Pout,R30
000224 93f0 0169 	STS  _Pout+1,R31
000226 9360 016a 	STS  _Pout+2,R22
000228 9370 016b 	STS  _Pout+3,R23
                 ; 0000 014A    integral = Kp * 0.1;
00022a 01f5      	MOVW R30,R10
00022b d5b9      	RCALL SUBOPT_0x6
                +
00022c ecad     +LDI R26 , LOW ( 0x3DCCCCCD )
00022d ecbc     +LDI R27 , HIGH ( 0x3DCCCCCD )
00022e ec8c     +LDI R24 , BYTE3 ( 0x3DCCCCCD )
00022f e39d     +LDI R25 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD2N 0x3DCCCCCD
000230 d8d6      	RCALL __MULF12
000231 93e0 0178 	STS  _integral,R30
000233 93f0 0179 	STS  _integral+1,R31
000235 9360 017a 	STS  _integral+2,R22
000237 9370 017b 	STS  _integral+3,R23
                 ; 0000 014B    Iout = Ki * integral;
000239 01d6      	MOVW R26,R12
00023a d5a6      	RCALL SUBOPT_0x5
00023b 93e0 016c 	STS  _Iout,R30
00023d 93f0 016d 	STS  _Iout+1,R31
00023f 9360 016e 	STS  _Iout+2,R22
000241 9370 016f 	STS  _Iout+3,R23
                 ; 0000 014C    derivative = (error - pre_error) / 0.1;
000243 91a0 0164 	LDS  R26,_pre_error
000245 91b0 0165 	LDS  R27,_pre_error+1
000247 9180 0166 	LDS  R24,_pre_error+2
000249 9190 0167 	LDS  R25,_pre_error+3
00024b d58c      	RCALL SUBOPT_0x4
00024c d863      	RCALL __SUBF12
00024d d59a      	RCALL SUBOPT_0x7
00024e d59c      	RCALL SUBOPT_0x8
00024f d905      	RCALL __DIVF21
000250 93e0 017c 	STS  _derivative,R30
000252 93f0 017d 	STS  _derivative+1,R31
000254 9360 017e 	STS  _derivative+2,R22
000256 9370 017f 	STS  _derivative+3,R23
                 ; 0000 014D    Dout = Kd * derivative;
000258 91a0 0180 	LDS  R26,_Kd
00025a 91b0 0181 	LDS  R27,_Kd+1
00025c d584      	RCALL SUBOPT_0x5
00025d 93e0 0170 	STS  _Dout,R30
00025f 93f0 0171 	STS  _Dout+1,R31
000261 9360 0172 	STS  _Dout+2,R22
000263 9370 0173 	STS  _Dout+3,R23
                 ; 0000 014E     // Calculate total output
                 ; 0000 014F    out = Pout + Iout + Dout;
000265 91e0 016c 	LDS  R30,_Iout
000267 91f0 016d 	LDS  R31,_Iout+1
000269 9160 016e 	LDS  R22,_Iout+2
00026b 9170 016f 	LDS  R23,_Iout+3
00026d 91a0 0168 	LDS  R26,_Pout
00026f 91b0 0169 	LDS  R27,_Pout+1
000271 9180 016a 	LDS  R24,_Pout+2
000273 9190 016b 	LDS  R25,_Pout+3
000275 d841      	RCALL __ADDF12
000276 91a0 0170 	LDS  R26,_Dout
000278 91b0 0171 	LDS  R27,_Dout+1
00027a 9180 0172 	LDS  R24,_Dout+2
00027c 9190 0173 	LDS  R25,_Dout+3
00027e d838      	RCALL __ADDF12
00027f 93e0 0174 	STS  _out,R30
000281 93f0 0175 	STS  _out+1,R31
000283 9360 0176 	STS  _out+2,R22
000285 9370 0177 	STS  _out+3,R23
                 ; 0000 0150     // Restrict to max/min
                 ; 0000 0151     if(out >= max)
000287 d568      	RCALL SUBOPT_0x9
000288 d570      	RCALL SUBOPT_0xA
000289 d910      	RCALL __CMPF12
00028a f010      	BRLO _0x1F
                 ; 0000 0152        out = max;
00028b d56d      	RCALL SUBOPT_0xA
00028c c007      	RJMP _0x3A
                 ; 0000 0153     else if(out <= min)
                 _0x1F:
00028d d562      	RCALL SUBOPT_0x9
00028e d56f      	RCALL SUBOPT_0xB
00028f d90a      	RCALL __CMPF12
000290 f011      	BREQ PC+3
000291 f008      	BRCS PC+2
000292 c009      	RJMP _0x21
                 ; 0000 0154        out = min;
000293 d56a      	RCALL SUBOPT_0xB
                 _0x3A:
000294 93e0 0174 	STS  _out,R30
000296 93f0 0175 	STS  _out+1,R31
000298 9360 0176 	STS  _out+2,R22
00029a 9370 0177 	STS  _out+3,R23
                 ; 0000 0155     // Save error to previous error
                 ; 0000 0156     pre_error = error;
                 _0x21:
00029c d53b      	RCALL SUBOPT_0x4
00029d 93e0 0164 	STS  _pre_error,R30
00029f 93f0 0165 	STS  _pre_error+1,R31
0002a1 9360 0166 	STS  _pre_error+2,R22
0002a3 9370 0167 	STS  _pre_error+3,R23
                 ; 0000 0157    return out;
0002a5 91e0 0174 	LDS  R30,_out
0002a7 91f0 0175 	LDS  R31,_out+1
0002a9 9160 0176 	LDS  R22,_out+2
0002ab 9170 0177 	LDS  R23,_out+3
0002ad 9628      	ADIW R28,8
0002ae 9508      	RET
                 ; 0000 0158 }
                 ; .FEND
                 ;
                 ;int compare ()
                 ; 0000 015B {
                 _compare:
                 ; .FSTART _compare
                 ; 0000 015C    i = 0;
0002af d553      	RCALL SUBOPT_0xC
                 ; 0000 015D   for (i = 0;i<8;i++ )
0002b0 d552      	RCALL SUBOPT_0xC
                 _0x23:
0002b1 d557      	RCALL SUBOPT_0xD
0002b2 9718      	SBIW R26,8
0002b3 f00c      	BRLT PC+2
0002b4 c04c      	RJMP _0x24
                 ; 0000 015E   {
                 ; 0000 015F     if(startwith(function[i],rx_buffer))
0002b5 d558      	RCALL SUBOPT_0xE
0002b6 d55d      	RCALL SUBOPT_0xF
0002b7 e6a8      	LDI  R26,LOW(_rx_buffer)
0002b8 e0b3      	LDI  R27,HIGH(_rx_buffer)
0002b9 d072      	RCALL _startwith
0002ba 9730      	SBIW R30,0
0002bb f409      	BRNE PC+2
0002bc c040      	RJMP _0x25
                 ; 0000 0160     {
                 ; 0000 0161     substring(rx_buffer,strlen(function[i]),strlen(rx_buffer));
0002bd e6e8      	LDI  R30,LOW(_rx_buffer)
0002be e0f3      	LDI  R31,HIGH(_rx_buffer)
0002bf d554      	RCALL SUBOPT_0xF
0002c0 d54d      	RCALL SUBOPT_0xE
0002c1 01df      	MOVW R26,R30
0002c2 d175      	RCALL _strlen
0002c3 d550      	RCALL SUBOPT_0xF
0002c4 e6a8      	LDI  R26,LOW(_rx_buffer)
0002c5 e0b3      	LDI  R27,HIGH(_rx_buffer)
0002c6 d171      	RCALL _strlen
0002c7 01df      	MOVW R26,R30
0002c8 d03a      	RCALL _substring
                 ; 0000 0162     number = atoi(str2);
0002c9 e9aa      	LDI  R26,LOW(_str2)
0002ca e0b1      	LDI  R27,HIGH(_str2)
0002cb d19c      	RCALL _atoi
0002cc 93e0 033e 	STS  _number,R30
0002ce 93f0 033f 	STS  _number+1,R31
                 ; 0000 0163    if(number != 0)
0002d0 d546      	RCALL SUBOPT_0x10
0002d1 f119      	BREQ _0x26
                 ; 0000 0164    {
                 ; 0000 0165       // printf("data is received\n");
                 ; 0000 0166       switch(i)
0002d2 d54a      	RCALL SUBOPT_0x11
                 ; 0000 0167      {
                 ; 0000 0168      case  0: SetPoint(number);
0002d3 9730      	SBIW R30,0
0002d4 f419      	BRNE _0x2A
0002d5 d54c      	RCALL SUBOPT_0x12
0002d6 d109      	RCALL _SetPoint
                 ; 0000 0169          break;
0002d7 c01b      	RJMP _0x29
                 ; 0000 016A      case  4: Kp_function(number);
                 _0x2A:
0002d8 30e4      	CPI  R30,LOW(0x4)
0002d9 e0a0      	LDI  R26,HIGH(0x4)
0002da 07fa      	CPC  R31,R26
0002db f419      	BRNE _0x2B
0002dc d545      	RCALL SUBOPT_0x12
0002dd d0f2      	RCALL _Kp_function
                 ; 0000 016B          break;
0002de c014      	RJMP _0x29
                 ; 0000 016C      case  5: Ki_function(number);
                 _0x2B:
0002df 30e5      	CPI  R30,LOW(0x5)
0002e0 e0a0      	LDI  R26,HIGH(0x5)
0002e1 07fa      	CPC  R31,R26
0002e2 f419      	BRNE _0x2C
0002e3 d53e      	RCALL SUBOPT_0x12
0002e4 d0ef      	RCALL _Ki_function
                 ; 0000 016D          break;
0002e5 c00d      	RJMP _0x29
                 ; 0000 016E      case  6: Kd_function(number);
                 _0x2C:
0002e6 30e6      	CPI  R30,LOW(0x6)
0002e7 e0a0      	LDI  R26,HIGH(0x6)
0002e8 07fa      	CPC  R31,R26
0002e9 f419      	BRNE _0x2D
0002ea d537      	RCALL SUBOPT_0x12
0002eb d0ec      	RCALL _Kd_function
                 ; 0000 016F          break;
0002ec c006      	RJMP _0x29
                 ; 0000 0170      case  7: mode_function(number);
                 _0x2D:
0002ed 30e7      	CPI  R30,LOW(0x7)
0002ee e0a0      	LDI  R26,HIGH(0x7)
0002ef 07fa      	CPC  R31,R26
0002f0 f411      	BRNE _0x29
0002f1 d530      	RCALL SUBOPT_0x12
0002f2 d0f5      	RCALL _mode_function
                 ; 0000 0171      }
                 _0x29:
                 ; 0000 0172      i = 0;
0002f3 d50f      	RCALL SUBOPT_0xC
                 ; 0000 0173    }
                 ; 0000 0174    else if( number == 0)
0002f4 c002      	RJMP _0x2F
                 _0x26:
0002f5 d521      	RCALL SUBOPT_0x10
0002f6 f051      	BREQ _0x24
                 ; 0000 0175    {
                 ; 0000 0176       // printf("no data is received\n");
                 ; 0000 0177       break;
                 ; 0000 0178    }
                 ; 0000 0179       number = 0;
                 _0x2F:
0002f7 e0e0      	LDI  R30,LOW(0)
0002f8 93e0 033e 	STS  _number,R30
0002fa 93e0 033f 	STS  _number+1,R30
                 ; 0000 017A 
                 ; 0000 017B       break;
0002fc c004      	RJMP _0x24
                 ; 0000 017C    }
                 ; 0000 017D   }
                 _0x25:
0002fd e4a0      	LDI  R26,LOW(_i)
0002fe e0b3      	LDI  R27,HIGH(_i)
0002ff d527      	RCALL SUBOPT_0x13
000300 cfb0      	RJMP _0x23
                 _0x24:
                 ; 0000 017E   return i;
000301 d51b      	RCALL SUBOPT_0x11
000302 9508      	RET
                 ; 0000 017F }
                 ; .FEND
                 ;void substring(const char *str1, int pos1, int pos2)
                 ; 0000 0181 {
                 _substring:
                 ; .FSTART _substring
                 ; 0000 0182   j = 0;
000303 d529      	RCALL SUBOPT_0x14
                 ;	*str1 -> Y+4
                 ;	pos1 -> Y+2
                 ;	pos2 -> Y+0
000304 e0e0      	LDI  R30,LOW(0)
000305 93e0 0342 	STS  _j,R30
000307 93e0 0343 	STS  _j+1,R30
                 ; 0000 0183   l = pos1;
000309 d526      	RCALL SUBOPT_0x15
                 ; 0000 0184    for(l = pos1 ; l <= pos2 ; l++)
00030a d525      	RCALL SUBOPT_0x15
                 _0x32:
00030b 81e8      	LD   R30,Y
00030c 81f9      	LDD  R31,Y+1
00030d 91a0 0344 	LDS  R26,_l
00030f 91b0 0345 	LDS  R27,_l+1
000311 17ea      	CP   R30,R26
000312 07fb      	CPC  R31,R27
000313 f0b4      	BRLT _0x33
                 ; 0000 0185   {
                 ; 0000 0186     str2[j++] = str1[l];
000314 e4a2      	LDI  R26,LOW(_j)
000315 e0b3      	LDI  R27,HIGH(_j)
000316 d510      	RCALL SUBOPT_0x13
000317 9731      	SBIW R30,1
000318 56e6      	SUBI R30,LOW(-_str2)
000319 4ffe      	SBCI R31,HIGH(-_str2)
00031a 010f      	MOVW R0,R30
00031b 91e0 0344 	LDS  R30,_l
00031d 91f0 0345 	LDS  R31,_l+1
00031f 81ac      	LDD  R26,Y+4
000320 81bd      	LDD  R27,Y+4+1
000321 0fae      	ADD  R26,R30
000322 1fbf      	ADC  R27,R31
000323 91ec      	LD   R30,X
000324 01d0      	MOVW R26,R0
000325 93ec      	ST   X,R30
                 ; 0000 0187   }
000326 e4a4      	LDI  R26,LOW(_l)
000327 e0b3      	LDI  R27,HIGH(_l)
000328 d4fe      	RCALL SUBOPT_0x13
000329 cfe1      	RJMP _0x32
                 _0x33:
                 ; 0000 0188 }
00032a 9626      	ADIW R28,6
00032b 9508      	RET
                 ; .FEND
                 ;int startwith(const char *pre, const char *str)
                 ; 0000 018A {
                 _startwith:
                 ; .FSTART _startwith
                 ; 0000 018B   return strncmp(pre, str, strlen(pre))==0 ;
00032c d500      	RCALL SUBOPT_0x14
                 ;	*pre -> Y+2
                 ;	*str -> Y+0
00032d 81ea      	LDD  R30,Y+2
00032e 81fb      	LDD  R31,Y+2+1
00032f d4e4      	RCALL SUBOPT_0xF
000330 81ea      	LDD  R30,Y+2
000331 81fb      	LDD  R31,Y+2+1
000332 d4e1      	RCALL SUBOPT_0xF
000333 d503      	RCALL SUBOPT_0x16
000334 d103      	RCALL _strlen
000335 2fae      	MOV  R26,R30
000336 d118      	RCALL _strncmp
000337 e0a0      	LDI  R26,LOW(0)
000338 d89d      	RCALL __EQB12
000339 e0f0      	LDI  R31,0
00033a c0ef      	RJMP _0x20A0005
                 ; 0000 018C }
                 ; .FEND
                 ;void Function1x()
                 ; 0000 018E {
                 _Function1x:
                 ; .FSTART _Function1x
                 ; 0000 018F    spd1 = 230400.0/timer_cnt;
00033b 91e0 0360 	LDS  R30,_timer_cnt
00033d 91f0 0361 	LDS  R31,_timer_cnt+1
00033f 9160 0362 	LDS  R22,_timer_cnt+2
000341 9170 0363 	LDS  R23,_timer_cnt+3
000343 d739      	RCALL __CDF1
                +
000344 e0a0     +LDI R26 , LOW ( 0x48610000 )
000345 e0b0     +LDI R27 , HIGH ( 0x48610000 )
000346 e681     +LDI R24 , BYTE3 ( 0x48610000 )
000347 e498     +LDI R25 , BYTE4 ( 0x48610000 )
                 	__GETD2N 0x48610000
000348 d80c      	RCALL __DIVF21
000349 93e0 0346 	STS  _spd1,R30
00034b 93f0 0347 	STS  _spd1+1,R31
00034d 9360 0348 	STS  _spd1+2,R22
00034f 9370 0349 	STS  _spd1+3,R23
                 ; 0000 0190    output = PID_controller(cmd,spd1);
000351 d4e8      	RCALL SUBOPT_0x17
000352 d492      	RCALL SUBOPT_0x6
000353 d93c      	RCALL __PUTPARD1
000354 91a0 0346 	LDS  R26,_spd1
000356 91b0 0347 	LDS  R27,_spd1+1
000358 9180 0348 	LDS  R24,_spd1+2
00035a 9190 0349 	LDS  R25,_spd1+3
00035c d4e2      	RCALL SUBOPT_0x18
                 ; 0000 0191    OCR2 = output;
                 ; 0000 0192    ext_cnt2x = 0;
                 ; 0000 0193    ext_cnt4x = 0;
                 ; 0000 0194    capture_pulse = 0;
                 ; 0000 0195    printf("%d,",cmd);
                 ; 0000 0196    printf("%5.2f,", spd1);
00035d 91e0 0346 	LDS  R30,_spd1
00035f 91f0 0347 	LDS  R31,_spd1+1
000361 9160 0348 	LDS  R22,_spd1+2
000363 9170 0349 	LDS  R23,_spd1+3
000365 d4fd      	RCALL SUBOPT_0x19
                 ; 0000 0197    if(mode == 1)
000366 f429      	BRNE _0x34
                 ; 0000 0198    {
                 ; 0000 0199       ADC_val_0 = read_adc(0);
000367 d504      	RCALL SUBOPT_0x1A
                 ; 0000 019A       Volt_0 = ADC_val_0*5/1023.0;
                 ; 0000 019B       Weight_0 = (Volt_0/0.05);
                 ; 0000 019C       printf("%d,%5.2f,%5.2f \n\r", ADC_val_0, Volt_0, Weight_0);
                +
000368 eae1     +LDI R30 , LOW ( 2 * _0x0 + ( 11 ) )
000369 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 11 ) )
                 	__POINTW1FN _0x0,11
00036a d536      	RCALL SUBOPT_0x1B
00036b c001      	RJMP _0x3B
                 ; 0000 019D    }
                 ; 0000 019E    else{
                 _0x34:
                 ; 0000 019F       ADC_val_1 = read_adc(1);
00036c d550      	RCALL SUBOPT_0x1C
                 ; 0000 01A0       Volt_1 = ADC_val_1*5/1023.0;
                 ; 0000 01A1       Weight_1 = (Volt_1/0.05);
                 ; 0000 01A2       printf("%d,%5.2f,%5.2f  \n\r", ADC_val_1, Volt_1, Weight_1);
                 _0x3B:
00036d d922      	RCALL __PUTPARD1
00036e d5a0      	RCALL SUBOPT_0x1D
                 ; 0000 01A3    }
                 ; 0000 01A4 
                 ; 0000 01A5 }
00036f 9508      	RET
                 ; .FEND
                 ;void Function2x()
                 ; 0000 01A7 {
                 _Function2x:
                 ; .FSTART _Function2x
                 ; 0000 01A8    //  printf("2x function is executed!\n");
                 ; 0000 01A9    spd3 = 83.3333*ext_cnt2x/Ts;
000370 01f2      	MOVW R30,R4
000371 2766      	CLR  R22
000372 2777      	CLR  R23
000373 d709      	RCALL __CDF1
                +
000374 eaa6     +LDI R26 , LOW ( 0x42A6AAA6 )
000375 eaba     +LDI R27 , HIGH ( 0x42A6AAA6 )
000376 ea86     +LDI R24 , BYTE3 ( 0x42A6AAA6 )
000377 e492     +LDI R25 , BYTE4 ( 0x42A6AAA6 )
                 	__GETD2N 0x42A6AAA6
000378 d59a      	RCALL SUBOPT_0x1E
000379 93e0 034a 	STS  _spd3,R30
00037b 93f0 034b 	STS  _spd3+1,R31
00037d 9360 034c 	STS  _spd3+2,R22
00037f 9370 034d 	STS  _spd3+3,R23
                 ; 0000 01AA    output = PID_controller(cmd,spd3);
000381 d4b8      	RCALL SUBOPT_0x17
000382 d462      	RCALL SUBOPT_0x6
000383 d90c      	RCALL __PUTPARD1
000384 91a0 034a 	LDS  R26,_spd3
000386 91b0 034b 	LDS  R27,_spd3+1
000388 9180 034c 	LDS  R24,_spd3+2
00038a 9190 034d 	LDS  R25,_spd3+3
00038c d4b2      	RCALL SUBOPT_0x18
                 ; 0000 01AB    OCR2 = output;
                 ; 0000 01AC    ext_cnt2x = 0;
                 ; 0000 01AD    ext_cnt4x = 0;
                 ; 0000 01AE    capture_pulse = 0;
                 ; 0000 01AF    printf("%d,",cmd);
                 ; 0000 01B0    printf("%5.2f,", spd3);
00038d 91e0 034a 	LDS  R30,_spd3
00038f 91f0 034b 	LDS  R31,_spd3+1
000391 9160 034c 	LDS  R22,_spd3+2
000393 9170 034d 	LDS  R23,_spd3+3
000395 d4cd      	RCALL SUBOPT_0x19
                 ; 0000 01B1    if(mode == 1)
000396 f429      	BRNE _0x36
                 ; 0000 01B2    {
                 ; 0000 01B3       ADC_val_0 = read_adc(0);
000397 d4d4      	RCALL SUBOPT_0x1A
                 ; 0000 01B4       Volt_0 = ADC_val_0*5/1023.0;
                 ; 0000 01B5       Weight_0 = (Volt_0/0.05);
                 ; 0000 01B6       printf("%d,%5.2f,%5.2f  \n\r", ADC_val_0, Volt_0, Weight_0);
                +
000398 ebe3     +LDI R30 , LOW ( 2 * _0x0 + ( 29 ) )
000399 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 29 ) )
                 	__POINTW1FN _0x0,29
00039a d506      	RCALL SUBOPT_0x1B
00039b c001      	RJMP _0x3C
                 ; 0000 01B7    }
                 ; 0000 01B8    else{
                 _0x36:
                 ; 0000 01B9       ADC_val_1 = read_adc(1);
00039c d520      	RCALL SUBOPT_0x1C
                 ; 0000 01BA       Volt_1 = ADC_val_1*5/1023.0;
                 ; 0000 01BB       Weight_1 = (Volt_1/0.05);
                 ; 0000 01BC       printf("%d,%5.2f,%5.2f  \n\r", ADC_val_1, Volt_1, Weight_1);
                 _0x3C:
00039d d8f2      	RCALL __PUTPARD1
00039e d570      	RCALL SUBOPT_0x1D
                 ; 0000 01BD    }
                 ; 0000 01BE }
00039f 9508      	RET
                 ; .FEND
                 ;void Function4x()
                 ; 0000 01C0 {
                 _Function4x:
                 ; .FSTART _Function4x
                 ; 0000 01C1    //  printf("4x function is executed!\n");
                 ; 0000 01C2    spd4 = 41.6667*ext_cnt4x/Ts;
0003a0 01f3      	MOVW R30,R6
0003a1 2766      	CLR  R22
0003a2 2777      	CLR  R23
0003a3 d6d9      	RCALL __CDF1
                +
0003a4 eba3     +LDI R26 , LOW ( 0x4226AAB3 )
0003a5 eaba     +LDI R27 , HIGH ( 0x4226AAB3 )
0003a6 e286     +LDI R24 , BYTE3 ( 0x4226AAB3 )
0003a7 e492     +LDI R25 , BYTE4 ( 0x4226AAB3 )
                 	__GETD2N 0x4226AAB3
0003a8 d56a      	RCALL SUBOPT_0x1E
0003a9 93e0 034e 	STS  _spd4,R30
0003ab 93f0 034f 	STS  _spd4+1,R31
0003ad 9360 0350 	STS  _spd4+2,R22
0003af 9370 0351 	STS  _spd4+3,R23
                 ; 0000 01C3    output = PID_controller(cmd,spd4);
0003b1 d488      	RCALL SUBOPT_0x17
0003b2 d432      	RCALL SUBOPT_0x6
0003b3 d8dc      	RCALL __PUTPARD1
0003b4 91a0 034e 	LDS  R26,_spd4
0003b6 91b0 034f 	LDS  R27,_spd4+1
0003b8 9180 0350 	LDS  R24,_spd4+2
0003ba 9190 0351 	LDS  R25,_spd4+3
0003bc d482      	RCALL SUBOPT_0x18
                 ; 0000 01C4    OCR2 = output;
                 ; 0000 01C5    ext_cnt2x = 0;
                 ; 0000 01C6    ext_cnt4x = 0;
                 ; 0000 01C7    capture_pulse = 0;
                 ; 0000 01C8    printf("%d,",cmd);
                 ; 0000 01C9    printf("%5.2f,", spd4);
0003bd 91e0 034e 	LDS  R30,_spd4
0003bf 91f0 034f 	LDS  R31,_spd4+1
0003c1 9160 0350 	LDS  R22,_spd4+2
0003c3 9170 0351 	LDS  R23,_spd4+3
0003c5 d49d      	RCALL SUBOPT_0x19
                 ; 0000 01CA    if(mode == 1)
0003c6 f429      	BRNE _0x38
                 ; 0000 01CB    {
                 ; 0000 01CC       ADC_val_0 = read_adc(0);
0003c7 d4a4      	RCALL SUBOPT_0x1A
                 ; 0000 01CD       Volt_0 = ADC_val_0*5/1023.0;
                 ; 0000 01CE       Weight_0 = (Volt_0/0.05);
                 ; 0000 01CF       printf("%d,%5.2f,%5.2f  \n\r", ADC_val_0, Volt_0, Weight_0);
                +
0003c8 ebe3     +LDI R30 , LOW ( 2 * _0x0 + ( 29 ) )
0003c9 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 29 ) )
                 	__POINTW1FN _0x0,29
0003ca d4d6      	RCALL SUBOPT_0x1B
0003cb c001      	RJMP _0x3D
                 ; 0000 01D0    }
                 ; 0000 01D1    else{
                 _0x38:
                 ; 0000 01D2       ADC_val_1 = read_adc(1);
0003cc d4f0      	RCALL SUBOPT_0x1C
                 ; 0000 01D3       Volt_1 = ADC_val_1*5/1023.0;
                 ; 0000 01D4       Weight_1 = (Volt_1/0.05);
                 ; 0000 01D5       printf("%d,%5.2f,%5.2f  \n\r", ADC_val_1, Volt_1, Weight_1);
                 _0x3D:
0003cd d8c2      	RCALL __PUTPARD1
0003ce d540      	RCALL SUBOPT_0x1D
                 ; 0000 01D6    }
                 ; 0000 01D7 }
0003cf 9508      	RET
                 ; .FEND
                 ;void Kp_function(int Kp_new)
                 ; 0000 01D9 {
                 _Kp_function:
                 ; .FSTART _Kp_function
                 ; 0000 01DA     Kp = Kp_new;
0003d0 d45c      	RCALL SUBOPT_0x14
                 ;	Kp_new -> Y+0
                +
0003d1 80a8     +LDD R10 , Y + 0
0003d2 80b9     +LDD R11 , Y + 0 + 1
                 	__GETWRS 10,11,0
                 ; 0000 01DB    //  printf("Kp = %d\n", Kp);
                 ; 0000 01DC }
0003d3 c017      	RJMP _0x20A0006
                 ; .FEND
                 ;void Ki_function(int Ki_new)
                 ; 0000 01DE {
                 _Ki_function:
                 ; .FSTART _Ki_function
                 ; 0000 01DF     Ki = Ki_new;
0003d4 d458      	RCALL SUBOPT_0x14
                 ;	Ki_new -> Y+0
                +
0003d5 80c8     +LDD R12 , Y + 0
0003d6 80d9     +LDD R13 , Y + 0 + 1
                 	__GETWRS 12,13,0
                 ; 0000 01E0    //  printf("Ki = %d\n", Ki);
                 ; 0000 01E1 }
0003d7 c013      	RJMP _0x20A0006
                 ; .FEND
                 ;void Kd_function(int Kd_new)
                 ; 0000 01E3 {
                 _Kd_function:
                 ; .FSTART _Kd_function
                 ; 0000 01E4     Kd = Kd_new;
0003d8 d454      	RCALL SUBOPT_0x14
                 ;	Kd_new -> Y+0
0003d9 81e8      	LD   R30,Y
0003da 81f9      	LDD  R31,Y+1
0003db 93e0 0180 	STS  _Kd,R30
0003dd 93f0 0181 	STS  _Kd+1,R31
                 ; 0000 01E5    //  printf("Kd = %d\n", Kd);
                 ; 0000 01E6 }
0003df c00b      	RJMP _0x20A0006
                 ; .FEND
                 ;void SetPoint(int Ref)
                 ; 0000 01E8 {
                 _SetPoint:
                 ; .FSTART _SetPoint
                 ; 0000 01E9     cmd = Ref;
0003e0 d44c      	RCALL SUBOPT_0x14
                 ;	Ref -> Y+0
0003e1 81e8      	LD   R30,Y
0003e2 81f9      	LDD  R31,Y+1
0003e3 93e0 0356 	STS  _cmd,R30
0003e5 93f0 0357 	STS  _cmd+1,R31
                 ; 0000 01EA    //  printf("Ref is = %d\n", cmd);
                 ; 0000 01EB }
0003e7 c003      	RJMP _0x20A0006
                 ; .FEND
                 ;void mode_function(int mode_number)
                 ; 0000 01ED {
                 _mode_function:
                 ; .FSTART _mode_function
                 ; 0000 01EE    mode = mode_number;
0003e8 d444      	RCALL SUBOPT_0x14
                 ;	mode_number -> Y+0
                +
0003e9 8088     +LDD R8 , Y + 0
0003ea 8099     +LDD R9 , Y + 0 + 1
                 	__GETWRS 8,9,0
                 ; 0000 01EF }
                 _0x20A0006:
0003eb 9622      	ADIW R28,2
0003ec 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _ftrunc:
                 ; .FSTART _ftrunc
0003ed d8a7      	RCALL __PUTPARD2
0003ee 817b         ldd  r23,y+3
0003ef 816a         ldd  r22,y+2
0003f0 81f9         ldd  r31,y+1
0003f1 81e8         ld   r30,y
0003f2 fb77         bst  r23,7
0003f3 0f77         lsl  r23
0003f4 fd67         sbrc r22,7
0003f5 6071         sbr  r23,1
0003f6 2f97         mov  r25,r23
0003f7 579e         subi r25,0x7e
0003f8 f081         breq __ftrunc0
0003f9 f078         brcs __ftrunc0
0003fa 3198         cpi  r25,24
0003fb f490         brsh __ftrunc1
0003fc 27aa         clr  r26
0003fd 27bb         clr  r27
0003fe 2788         clr  r24
                 __ftrunc2:
0003ff 9408         sec
000400 9587         ror  r24
000401 95b7         ror  r27
000402 95a7         ror  r26
000403 959a         dec  r25
000404 f7d1         brne __ftrunc2
000405 23ea         and  r30,r26
000406 23fb         and  r31,r27
000407 2368         and  r22,r24
000408 c005         rjmp __ftrunc1
                 __ftrunc0:
000409 94e8         clt
00040a 2777         clr  r23
00040b 27ee         clr  r30
00040c 27ff         clr  r31
00040d 2766         clr  r22
                 __ftrunc1:
00040e 776f         cbr  r22,0x80
00040f 9576         lsr  r23
000410 f408         brcc __ftrunc3
000411 6860         sbr  r22,0x80
                 __ftrunc3:
000412 f977         bld  r23,7
000413 91a9         ld   r26,y+
000414 91b9         ld   r27,y+
000415 9189         ld   r24,y+
000416 9199         ld   r25,y+
000417 17ea         cp   r30,r26
000418 07fb         cpc  r31,r27
000419 0768         cpc  r22,r24
00041a 0779         cpc  r23,r25
00041b fb97         bst  r25,7
00041c 9508         ret
                 ; .FEND
                 _floor:
                 ; .FSTART _floor
00041d d3b2      	RCALL SUBOPT_0x2
00041e dfce      	RCALL _ftrunc
00041f d86b      	RCALL __PUTD1S0
000420 f411          brne __floor1
                 __floor0:
000421 d4ff      	RCALL SUBOPT_0x1F
000422 c007      	RJMP _0x20A0005
                 __floor1:
000423 f7ee          brtc __floor0
000424 d4fc      	RCALL SUBOPT_0x1F
                +
000425 e0a0     +LDI R26 , LOW ( 0x3F800000 )
000426 e0b0     +LDI R27 , HIGH ( 0x3F800000 )
000427 e880     +LDI R24 , BYTE3 ( 0x3F800000 )
000428 e39f     +LDI R25 , BYTE4 ( 0x3F800000 )
                 	__GETD2N 0x3F800000
000429 d686      	RCALL __SUBF12
                 _0x20A0005:
00042a 9624      	ADIW R28,4
00042b 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _strcpyf:
                 ; .FSTART _strcpyf
00042c d400      	RCALL SUBOPT_0x14
00042d 91e9          ld   r30,y+
00042e 91f9          ld   r31,y+
00042f 91a9          ld   r26,y+
000430 91b9          ld   r27,y+
000431 01cd          movw r24,r26
                 strcpyf0:
000432 9005      	lpm  r0,z+
000433 920d          st   x+,r0
000434 2000          tst  r0
000435 f7e1          brne strcpyf0
000436 01fc          movw r30,r24
000437 9508          ret
                 ; .FEND
                 _strlen:
                 ; .FSTART _strlen
000438 d3f4      	RCALL SUBOPT_0x14
000439 91a9          ld   r26,y+
00043a 91b9          ld   r27,y+
00043b 27ee          clr  r30
00043c 27ff          clr  r31
                 strlen0:
00043d 916d          ld   r22,x+
00043e 2366          tst  r22
00043f f011          breq strlen1
000440 9631          adiw r30,1
000441 cffb          rjmp strlen0
                 strlen1:
000442 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000443 d3e9      	RCALL SUBOPT_0x14
000444 27aa          clr  r26
000445 27bb          clr  r27
000446 91e9          ld   r30,y+
000447 91f9          ld   r31,y+
                 strlenf0:
000448 9005      	lpm  r0,z+
000449 2000          tst  r0
00044a f011          breq strlenf1
00044b 9611          adiw r26,1
00044c cffb          rjmp strlenf0
                 strlenf1:
00044d 01fd          movw r30,r26
00044e 9508          ret
                 ; .FEND
                 _strncmp:
                 ; .FSTART _strncmp
00044f 93aa      	ST   -Y,R26
000450 2766          clr  r22
000451 2777          clr  r23
000452 9189          ld   r24,y+
000453 91e9          ld   r30,y+
000454 91f9          ld   r31,y+
000455 91a9          ld   r26,y+
000456 91b9          ld   r27,y+
                 strncmp0:
000457 2388          tst  r24
000458 f049          breq strncmp1
000459 958a          dec  r24
00045a 916d          ld   r22,x+
00045b 9171          ld   r23,z+
00045c 1767          cp   r22,r23
00045d f421          brne strncmp1
00045e 2366          tst  r22
00045f f7b9          brne strncmp0
                 strncmp3:
000460 27ee          clr  r30
000461 9508          ret
                 strncmp1:
000462 1b67          sub  r22,r23
000463 f3e1          breq strncmp3
000464 e0e1          ldi  r30,1
000465 f408          brcc strncmp2
000466 50e2          subi r30,2
                 strncmp2:
000467 9508          ret
                 ; .FEND
                 
                 	.CSEG
                 _atoi:
                 ; .FSTART _atoi
000468 d3c4      	RCALL SUBOPT_0x14
000469 81b9         	ldd  r27,y+1
00046a 81a8         	ld   r26,y
                 __atoi0:
00046b 91ec         	ld   r30,x
00046c 2f8a              mov  r24,r26
00046d 2fae      	MOV  R26,R30
00046e d34e      	RCALL _isspace
00046f 2fa8              mov  r26,r24
000470 23ee         	tst  r30
000471 f011         	breq __atoi1
000472 9611         	adiw r26,1
000473 cff7         	rjmp __atoi0
                 __atoi1:
000474 94e8         	clt
000475 91ec         	ld   r30,x
000476 32ed         	cpi  r30,'-'
000477 f411         	brne __atoi2
000478 9468         	set
000479 c002         	rjmp __atoi3
                 __atoi2:
00047a 32eb         	cpi  r30,'+'
00047b f409         	brne __atoi4
                 __atoi3:
00047c 9611         	adiw r26,1
                 __atoi4:
00047d 2766         	clr  r22
00047e 2777         	clr  r23
                 __atoi5:
00047f 91ec         	ld   r30,x
000480 2f8a              mov  r24,r26
000481 2fae      	MOV  R26,R30
000482 d331      	RCALL _isdigit
000483 2fa8              mov  r26,r24
000484 23ee         	tst  r30
000485 f079         	breq __atoi6
000486 01fb         	movw r30,r22
000487 0f66         	lsl  r22
000488 1f77         	rol  r23
000489 0f66         	lsl  r22
00048a 1f77         	rol  r23
00048b 0f6e         	add  r22,r30
00048c 1f7f         	adc  r23,r31
00048d 0f66         	lsl  r22
00048e 1f77         	rol  r23
00048f 91ed         	ld   r30,x+
000490 27ff         	clr  r31
000491 53e0         	subi r30,'0'
000492 0f6e         	add  r22,r30
000493 1f7f         	adc  r23,r31
000494 cfea         	rjmp __atoi5
                 __atoi6:
000495 01fb         	movw r30,r22
000496 f41e         	brtc __atoi7
000497 95e0         	com  r30
000498 95f0         	com  r31
000499 9631         	adiw r30,1
                 __atoi7:
00049a 9622         	adiw r28,2
00049b 9508         	ret
                 ; .FEND
                 _ftoa:
                 ; .FSTART _ftoa
00049c d486      	RCALL SUBOPT_0x20
00049d e0e0      	LDI  R30,LOW(0)
00049e 83ea      	STD  Y+2,R30
00049f e3ef      	LDI  R30,LOW(63)
0004a0 83eb      	STD  Y+3,R30
0004a1 d816      	RCALL __SAVELOCR2
0004a2 85eb      	LDD  R30,Y+11
0004a3 85fc      	LDD  R31,Y+11+1
0004a4 3fef      	CPI  R30,LOW(0xFFFF)
0004a5 efaf      	LDI  R26,HIGH(0xFFFF)
0004a6 07fa      	CPC  R31,R26
0004a7 f429      	BRNE _0x204000D
0004a8 d480      	RCALL SUBOPT_0x21
                +
0004a9 eca8     +LDI R26 , LOW ( 2 * _0x2040000 + ( 0 ) )
0004aa e0b1     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 0 ) )
                 	__POINTW2FN _0x2040000,0
0004ab df80      	RCALL _strcpyf
0004ac c06f      	RJMP _0x20A0004
                 _0x204000D:
0004ad 3fef      	CPI  R30,LOW(0x7FFF)
0004ae e7af      	LDI  R26,HIGH(0x7FFF)
0004af 07fa      	CPC  R31,R26
0004b0 f429      	BRNE _0x204000C
0004b1 d477      	RCALL SUBOPT_0x21
                +
0004b2 eca9     +LDI R26 , LOW ( 2 * _0x2040000 + ( 1 ) )
0004b3 e0b1     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 1 ) )
                 	__POINTW2FN _0x2040000,1
0004b4 df77      	RCALL _strcpyf
0004b5 c066      	RJMP _0x20A0004
                 _0x204000C:
0004b6 85ac      	LDD  R26,Y+12
0004b7 23aa      	TST  R26
0004b8 f432      	BRPL _0x204000F
0004b9 d472      	RCALL SUBOPT_0x22
0004ba d556      	RCALL __ANEGF1
0004bb d475      	RCALL SUBOPT_0x23
0004bc d479      	RCALL SUBOPT_0x24
0004bd e2ed      	LDI  R30,LOW(45)
0004be 93ec      	ST   X,R30
                 _0x204000F:
0004bf 85a8      	LDD  R26,Y+8
0004c0 30a7      	CPI  R26,LOW(0x7)
0004c1 f010      	BRLO _0x2040010
0004c2 e0e6      	LDI  R30,LOW(6)
0004c3 87e8      	STD  Y+8,R30
                 _0x2040010:
0004c4 8518      	LDD  R17,Y+8
                 _0x2040011:
0004c5 d476      	RCALL SUBOPT_0x25
0004c6 f021      	BREQ _0x2040013
0004c7 d478      	RCALL SUBOPT_0x26
0004c8 d47c      	RCALL SUBOPT_0x27
0004c9 d47e      	RCALL SUBOPT_0x28
0004ca cffa      	RJMP _0x2040011
                 _0x2040013:
0004cb d481      	RCALL SUBOPT_0x29
0004cc d5ea      	RCALL __ADDF12
0004cd d463      	RCALL SUBOPT_0x23
0004ce e010      	LDI  R17,LOW(0)
                +
0004cf e0e0     +LDI R30 , LOW ( 0x3F800000 )
0004d0 e0f0     +LDI R31 , HIGH ( 0x3F800000 )
0004d1 e860     +LDI R22 , BYTE3 ( 0x3F800000 )
0004d2 e37f     +LDI R23 , BYTE4 ( 0x3F800000 )
                 	__GETD1N 0x3F800000
0004d3 d474      	RCALL SUBOPT_0x28
                 _0x2040014:
0004d4 d478      	RCALL SUBOPT_0x29
0004d5 d6c4      	RCALL __CMPF12
0004d6 f060      	BRLO _0x2040016
0004d7 d468      	RCALL SUBOPT_0x26
0004d8 d47d      	RCALL SUBOPT_0x2A
0004d9 d46e      	RCALL SUBOPT_0x28
0004da 5f1f      	SUBI R17,-LOW(1)
0004db 3217      	CPI  R17,39
0004dc f028      	BRLO _0x2040017
0004dd d44b      	RCALL SUBOPT_0x21
                +
0004de ecad     +LDI R26 , LOW ( 2 * _0x2040000 + ( 5 ) )
0004df e0b1     +LDI R27 , HIGH ( 2 * _0x2040000 + ( 5 ) )
                 	__POINTW2FN _0x2040000,5
0004e0 df4b      	RCALL _strcpyf
0004e1 c03a      	RJMP _0x20A0004
                 _0x2040017:
0004e2 cff1      	RJMP _0x2040014
                 _0x2040016:
0004e3 3010      	CPI  R17,0
0004e4 f421      	BRNE _0x2040018
0004e5 d450      	RCALL SUBOPT_0x24
0004e6 e3e0      	LDI  R30,LOW(48)
0004e7 93ec      	ST   X,R30
0004e8 c016      	RJMP _0x2040019
                 _0x2040018:
                 _0x204001A:
0004e9 d452      	RCALL SUBOPT_0x25
0004ea f0a1      	BREQ _0x204001C
0004eb d454      	RCALL SUBOPT_0x26
0004ec d458      	RCALL SUBOPT_0x27
0004ed d46b      	RCALL SUBOPT_0x2B
0004ee d2f9      	RCALL SUBOPT_0x7
0004ef df2d      	RCALL _floor
0004f0 d457      	RCALL SUBOPT_0x28
0004f1 d45b      	RCALL SUBOPT_0x29
0004f2 d662      	RCALL __DIVF21
0004f3 d550      	RCALL __CFD1U
0004f4 2f0e      	MOV  R16,R30
0004f5 d440      	RCALL SUBOPT_0x24
0004f6 d468      	RCALL SUBOPT_0x2C
0004f7 d448      	RCALL SUBOPT_0x26
0004f8 d2ec      	RCALL SUBOPT_0x6
0004f9 d60d      	RCALL __MULF12
0004fa d46a      	RCALL SUBOPT_0x2D
0004fb d7a3      	RCALL __SWAPD12
0004fc d5b3      	RCALL __SUBF12
0004fd d433      	RCALL SUBOPT_0x23
0004fe cfea      	RJMP _0x204001A
                 _0x204001C:
                 _0x2040019:
0004ff 85e8      	LDD  R30,Y+8
000500 30e0      	CPI  R30,0
000501 f0b1      	BREQ _0x20A0003
000502 d433      	RCALL SUBOPT_0x24
000503 e2ee      	LDI  R30,LOW(46)
000504 93ec      	ST   X,R30
                 _0x204001E:
000505 85e8      	LDD  R30,Y+8
000506 50e1      	SUBI R30,LOW(1)
000507 87e8      	STD  Y+8,R30
000508 5fef      	SUBI R30,-LOW(1)
000509 f071      	BREQ _0x2040020
00050a d45a      	RCALL SUBOPT_0x2D
00050b d44a      	RCALL SUBOPT_0x2A
00050c d424      	RCALL SUBOPT_0x23
00050d d41e      	RCALL SUBOPT_0x22
00050e d535      	RCALL __CFD1U
00050f 2f0e      	MOV  R16,R30
000510 d425      	RCALL SUBOPT_0x24
000511 d44d      	RCALL SUBOPT_0x2C
000512 d452      	RCALL SUBOPT_0x2D
000513 d2d1      	RCALL SUBOPT_0x6
000514 d78a      	RCALL __SWAPD12
000515 d59a      	RCALL __SUBF12
000516 d41a      	RCALL SUBOPT_0x23
000517 cfed      	RJMP _0x204001E
                 _0x2040020:
                 _0x20A0003:
000518 81ae      	LDD  R26,Y+6
000519 81bf      	LDD  R27,Y+6+1
00051a e0e0      	LDI  R30,LOW(0)
00051b 93ec      	ST   X,R30
                 _0x20A0004:
00051c d7a2      	RCALL __LOADLOCR2
00051d 962d      	ADIW R28,13
00051e 9508      	RET
                 ; .FEND
                 
                 	.DSEG
                 
                 	.CSEG
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _putchar:
                 ; .FSTART _putchar
00051f 93aa      	ST   -Y,R26
                 putchar0:
000520 9b5d           sbis usr,udre
000521 cffe           rjmp putchar0
000522 81e8           ld   r30,y
000523 b9ec           out  udr,r30
                 _0x20A0002:
000524 9621      	ADIW R28,1
000525 9508      	RET
                 ; .FEND
                 _put_usart_G103:
                 ; .FSTART _put_usart_G103
000526 d306      	RCALL SUBOPT_0x14
000527 81aa      	LDD  R26,Y+2
000528 dff6      	RCALL _putchar
000529 81a8      	LD   R26,Y
00052a 81b9      	LDD  R27,Y+1
00052b d2fb      	RCALL SUBOPT_0x13
00052c 9623      	ADIW R28,3
00052d 9508      	RET
                 ; .FEND
                 __ftoe_G103:
                 ; .FSTART __ftoe_G103
00052e d3f4      	RCALL SUBOPT_0x20
00052f e8e0      	LDI  R30,LOW(128)
000530 83ea      	STD  Y+2,R30
000531 e3ef      	LDI  R30,LOW(63)
000532 83eb      	STD  Y+3,R30
000533 d782      	RCALL __SAVELOCR4
000534 85ee      	LDD  R30,Y+14
000535 85ff      	LDD  R31,Y+14+1
000536 3fef      	CPI  R30,LOW(0xFFFF)
000537 efaf      	LDI  R26,HIGH(0xFFFF)
000538 07fa      	CPC  R31,R26
000539 f439      	BRNE _0x2060019
00053a 85e8      	LDD  R30,Y+8
00053b 85f9      	LDD  R31,Y+8+1
00053c d2d7      	RCALL SUBOPT_0xF
                +
00053d eda2     +LDI R26 , LOW ( 2 * _0x2060000 + ( 0 ) )
00053e e0b1     +LDI R27 , HIGH ( 2 * _0x2060000 + ( 0 ) )
                 	__POINTW2FN _0x2060000,0
00053f deec      	RCALL _strcpyf
000540 c083      	RJMP _0x20A0001
                 _0x2060019:
000541 3fef      	CPI  R30,LOW(0x7FFF)
000542 e7af      	LDI  R26,HIGH(0x7FFF)
000543 07fa      	CPC  R31,R26
000544 f431      	BRNE _0x2060018
000545 d424      	RCALL SUBOPT_0x2E
000546 d2cd      	RCALL SUBOPT_0xF
                +
000547 eda3     +LDI R26 , LOW ( 2 * _0x2060000 + ( 1 ) )
000548 e0b1     +LDI R27 , HIGH ( 2 * _0x2060000 + ( 1 ) )
                 	__POINTW2FN _0x2060000,1
000549 dee2      	RCALL _strcpyf
00054a c079      	RJMP _0x20A0001
                 _0x2060018:
00054b 85ab      	LDD  R26,Y+11
00054c 30a7      	CPI  R26,LOW(0x7)
00054d f010      	BRLO _0x206001B
00054e e0e6      	LDI  R30,LOW(6)
00054f 87eb      	STD  Y+11,R30
                 _0x206001B:
000550 851b      	LDD  R17,Y+11
                 _0x206001C:
000551 d3ea      	RCALL SUBOPT_0x25
000552 f019      	BREQ _0x206001E
000553 d419      	RCALL SUBOPT_0x2F
000554 d41d      	RCALL SUBOPT_0x30
000555 cffb      	RJMP _0x206001C
                 _0x206001E:
000556 d420      	RCALL SUBOPT_0x31
000557 d754      	RCALL __CPD10
000558 f421      	BRNE _0x206001F
000559 e030      	LDI  R19,LOW(0)
00055a d412      	RCALL SUBOPT_0x2F
00055b d416      	RCALL SUBOPT_0x30
00055c c021      	RJMP _0x2060020
                 _0x206001F:
00055d 853b      	LDD  R19,Y+11
00055e d41d      	RCALL SUBOPT_0x32
00055f f009      	BREQ PC+2
000560 f408      	BRCC PC+2
000561 c00a      	RJMP _0x2060021
000562 d40a      	RCALL SUBOPT_0x2F
000563 d40e      	RCALL SUBOPT_0x30
                 _0x2060022:
000564 d417      	RCALL SUBOPT_0x32
000565 f028      	BRLO _0x2060024
000566 d41c      	RCALL SUBOPT_0x33
000567 d3dd      	RCALL SUBOPT_0x27
000568 d41f      	RCALL SUBOPT_0x34
000569 5f3f      	SUBI R19,-LOW(1)
00056a cff9      	RJMP _0x2060022
                 _0x2060024:
00056b c009      	RJMP _0x2060025
                 _0x2060021:
                 _0x2060026:
00056c d40f      	RCALL SUBOPT_0x32
00056d f428      	BRSH _0x2060028
00056e d414      	RCALL SUBOPT_0x33
00056f d3e6      	RCALL SUBOPT_0x2A
000570 d417      	RCALL SUBOPT_0x34
000571 5031      	SUBI R19,LOW(1)
000572 cff9      	RJMP _0x2060026
                 _0x2060028:
000573 d3f9      	RCALL SUBOPT_0x2F
000574 d3fd      	RCALL SUBOPT_0x30
                 _0x2060025:
000575 d401      	RCALL SUBOPT_0x31
000576 d3e2      	RCALL SUBOPT_0x2B
000577 d410      	RCALL SUBOPT_0x34
000578 d403      	RCALL SUBOPT_0x32
000579 f020      	BRLO _0x2060029
00057a d408      	RCALL SUBOPT_0x33
00057b d3c9      	RCALL SUBOPT_0x27
00057c d40b      	RCALL SUBOPT_0x34
00057d 5f3f      	SUBI R19,-LOW(1)
                 _0x2060029:
                 _0x2060020:
00057e e010      	LDI  R17,LOW(0)
                 _0x206002A:
00057f 85eb      	LDD  R30,Y+11
000580 17e1      	CP   R30,R17
000581 f110      	BRLO _0x206002C
000582 d40a      	RCALL SUBOPT_0x35
000583 d3c1      	RCALL SUBOPT_0x27
000584 d3d4      	RCALL SUBOPT_0x2B
000585 d262      	RCALL SUBOPT_0x7
000586 de96      	RCALL _floor
000587 d3ea      	RCALL SUBOPT_0x30
000588 d24a      	RCALL SUBOPT_0x3
000589 d3f9      	RCALL SUBOPT_0x33
00058a d5ca      	RCALL __DIVF21
00058b d4b8      	RCALL __CFD1U
00058c 2f0e      	MOV  R16,R30
00058d d404      	RCALL SUBOPT_0x36
00058e 2fe0      	MOV  R30,R16
00058f 5de0      	SUBI R30,-LOW(48)
000590 93ec      	ST   X,R30
000591 2fe0      	MOV  R30,R16
000592 27ff      	CLR  R31
000593 2766      	CLR  R22
000594 2777      	CLR  R23
000595 d4e7      	RCALL __CDF1
000596 d3f6      	RCALL SUBOPT_0x35
000597 d56f      	RCALL __MULF12
000598 d3ea      	RCALL SUBOPT_0x33
000599 d705      	RCALL __SWAPD12
00059a d515      	RCALL __SUBF12
00059b d3ec      	RCALL SUBOPT_0x34
00059c 2fe1      	MOV  R30,R17
00059d 5f1f      	SUBI R17,-1
00059e 30e0      	CPI  R30,0
00059f f6f9      	BRNE _0x206002A
0005a0 d3f1      	RCALL SUBOPT_0x36
0005a1 e2ee      	LDI  R30,LOW(46)
0005a2 93ec      	ST   X,R30
0005a3 cfdb      	RJMP _0x206002A
                 _0x206002C:
0005a4 d3f4      	RCALL SUBOPT_0x37
0005a5 9731      	SBIW R30,1
0005a6 85aa      	LDD  R26,Y+10
0005a7 83a0      	STD  Z+0,R26
0005a8 3030      	CPI  R19,0
0005a9 f42c      	BRGE _0x206002E
0005aa 9531      	NEG  R19
0005ab 85a8      	LDD  R26,Y+8
0005ac 85b9      	LDD  R27,Y+8+1
0005ad e2ed      	LDI  R30,LOW(45)
0005ae c003      	RJMP _0x2060113
                 _0x206002E:
0005af 85a8      	LDD  R26,Y+8
0005b0 85b9      	LDD  R27,Y+8+1
0005b1 e2eb      	LDI  R30,LOW(43)
                 _0x2060113:
0005b2 93ec      	ST   X,R30
0005b3 d3e5      	RCALL SUBOPT_0x37
0005b4 d3e4      	RCALL SUBOPT_0x37
0005b5 d3e8      	RCALL SUBOPT_0x38
0005b6 d65d      	RCALL __DIVB21
0005b7 5de0      	SUBI R30,-LOW(48)
0005b8 01db      	MOVW R26,R22
0005b9 93ec      	ST   X,R30
0005ba d3de      	RCALL SUBOPT_0x37
0005bb d3e2      	RCALL SUBOPT_0x38
0005bc d681      	RCALL __MODB21
0005bd 5de0      	SUBI R30,-LOW(48)
0005be 01db      	MOVW R26,R22
0005bf 93ec      	ST   X,R30
0005c0 85a8      	LDD  R26,Y+8
0005c1 85b9      	LDD  R27,Y+8+1
0005c2 e0e0      	LDI  R30,LOW(0)
0005c3 93ec      	ST   X,R30
                 _0x20A0001:
0005c4 d6f8      	RCALL __LOADLOCR4
0005c5 9660      	ADIW R28,16
0005c6 9508      	RET
                 ; .FEND
                 __print_G103:
                 ; .FSTART __print_G103
0005c7 d265      	RCALL SUBOPT_0x14
0005c8 97ef      	SBIW R28,63
0005c9 9761      	SBIW R28,17
0005ca d6e9      	RCALL __SAVELOCR6
0005cb e010      	LDI  R17,0
                +
0005cc 01fe     +MOVW R30 , R28
0005cd 5ae8     +SUBI R30 , LOW ( - 88 )
0005ce 4fff     +SBCI R31 , HIGH ( - 88 )
0005cf 9001     +LD R0 , Z +
0005d0 81f0     +LD R31 , Z
0005d1 2de0     +MOV R30 , R0
                 	__GETW1SX 88
0005d2 87e8      	STD  Y+8,R30
0005d3 87f9      	STD  Y+8+1,R31
                +
0005d4 01fe     +MOVW R30 , R28
0005d5 5aea     +SUBI R30 , LOW ( - 86 )
0005d6 4fff     +SBCI R31 , HIGH ( - 86 )
0005d7 9001     +LD R0 , Z +
0005d8 81f0     +LD R31 , Z
0005d9 2de0     +MOV R30 , R0
                 	__GETW1SX 86
0005da 83ee      	STD  Y+6,R30
0005db 83ff      	STD  Y+6+1,R31
0005dc d25a      	RCALL SUBOPT_0x16
0005dd e0e0      	LDI  R30,LOW(0)
0005de e0f0      	LDI  R31,HIGH(0)
0005df 93ed      	ST   X+,R30
0005e0 93fc      	ST   X,R31
                 _0x2060030:
0005e1 01de      	MOVW R26,R28
0005e2 5aa4      	SUBI R26,LOW(-(92))
0005e3 4fbf      	SBCI R27,HIGH(-(92))
0005e4 d242      	RCALL SUBOPT_0x13
0005e5 9731      	SBIW R30,1
0005e6 91e4      	LPM  R30,Z
0005e7 2f2e      	MOV  R18,R30
0005e8 30e0      	CPI  R30,0
0005e9 f409      	BRNE PC+2
0005ea c1a5      	RJMP _0x2060032
0005eb 2fe1      	MOV  R30,R17
0005ec 30e0      	CPI  R30,0
0005ed f431      	BRNE _0x2060036
0005ee 3225      	CPI  R18,37
0005ef f411      	BRNE _0x2060037
0005f0 e011      	LDI  R17,LOW(1)
0005f1 c001      	RJMP _0x2060038
                 _0x2060037:
0005f2 d3b0      	RCALL SUBOPT_0x39
                 _0x2060038:
0005f3 c19b      	RJMP _0x2060035
                 _0x2060036:
0005f4 30e1      	CPI  R30,LOW(0x1)
0005f5 f4b9      	BRNE _0x2060039
0005f6 3225      	CPI  R18,37
0005f7 f411      	BRNE _0x206003A
0005f8 d3aa      	RCALL SUBOPT_0x39
0005f9 c194      	RJMP _0x2060114
                 _0x206003A:
0005fa e012      	LDI  R17,LOW(2)
0005fb e0e0      	LDI  R30,LOW(0)
0005fc 8bed      	STD  Y+21,R30
0005fd e000      	LDI  R16,LOW(0)
0005fe 322d      	CPI  R18,45
0005ff f411      	BRNE _0x206003B
000600 e001      	LDI  R16,LOW(1)
000601 c18d      	RJMP _0x2060035
                 _0x206003B:
000602 322b      	CPI  R18,43
000603 f419      	BRNE _0x206003C
000604 e2eb      	LDI  R30,LOW(43)
000605 8bed      	STD  Y+21,R30
000606 c188      	RJMP _0x2060035
                 _0x206003C:
000607 3220      	CPI  R18,32
000608 f419      	BRNE _0x206003D
000609 e2e0      	LDI  R30,LOW(32)
00060a 8bed      	STD  Y+21,R30
00060b c183      	RJMP _0x2060035
                 _0x206003D:
00060c c002      	RJMP _0x206003E
                 _0x2060039:
00060d 30e2      	CPI  R30,LOW(0x2)
00060e f439      	BRNE _0x206003F
                 _0x206003E:
00060f e050      	LDI  R21,LOW(0)
000610 e013      	LDI  R17,LOW(3)
000611 3320      	CPI  R18,48
000612 f411      	BRNE _0x2060040
000613 6800      	ORI  R16,LOW(128)
000614 c17a      	RJMP _0x2060035
                 _0x2060040:
000615 c002      	RJMP _0x2060041
                 _0x206003F:
000616 30e3      	CPI  R30,LOW(0x3)
000617 f491      	BRNE _0x2060042
                 _0x2060041:
000618 3320      	CPI  R18,48
000619 f010      	BRLO _0x2060044
00061a 332a      	CPI  R18,58
00061b f008      	BRLO _0x2060045
                 _0x2060044:
00061c c007      	RJMP _0x2060043
                 _0x2060045:
00061d e0aa      	LDI  R26,LOW(10)
00061e 9f5a      	MUL  R21,R26
00061f 2d50      	MOV  R21,R0
000620 2fe2      	MOV  R30,R18
000621 53e0      	SUBI R30,LOW(48)
000622 0f5e      	ADD  R21,R30
000623 c16b      	RJMP _0x2060035
                 _0x2060043:
000624 e040      	LDI  R20,LOW(0)
000625 322e      	CPI  R18,46
000626 f411      	BRNE _0x2060046
000627 e014      	LDI  R17,LOW(4)
000628 c166      	RJMP _0x2060035
                 _0x2060046:
000629 c00f      	RJMP _0x2060047
                 _0x2060042:
00062a 30e4      	CPI  R30,LOW(0x4)
00062b f499      	BRNE _0x2060049
00062c 3320      	CPI  R18,48
00062d f010      	BRLO _0x206004B
00062e 332a      	CPI  R18,58
00062f f008      	BRLO _0x206004C
                 _0x206004B:
000630 c008      	RJMP _0x206004A
                 _0x206004C:
000631 6200      	ORI  R16,LOW(32)
000632 e0aa      	LDI  R26,LOW(10)
000633 9f4a      	MUL  R20,R26
000634 2d40      	MOV  R20,R0
000635 2fe2      	MOV  R30,R18
000636 53e0      	SUBI R30,LOW(48)
000637 0f4e      	ADD  R20,R30
000638 c156      	RJMP _0x2060035
                 _0x206004A:
                 _0x2060047:
000639 362c      	CPI  R18,108
00063a f419      	BRNE _0x206004D
00063b 6002      	ORI  R16,LOW(2)
00063c e015      	LDI  R17,LOW(5)
00063d c151      	RJMP _0x2060035
                 _0x206004D:
00063e c003      	RJMP _0x206004E
                 _0x2060049:
00063f 30e5      	CPI  R30,LOW(0x5)
000640 f009      	BREQ PC+2
000641 c14d      	RJMP _0x2060035
                 _0x206004E:
000642 2fe2      	MOV  R30,R18
000643 36e3      	CPI  R30,LOW(0x63)
000644 f439      	BRNE _0x2060053
000645 d364      	RCALL SUBOPT_0x3A
000646 d36a      	RCALL SUBOPT_0x3B
000647 d362      	RCALL SUBOPT_0x3A
000648 81a4      	LDD  R26,Z+4
000649 93aa      	ST   -Y,R26
00064a d36d      	RCALL SUBOPT_0x3C
00064b c142      	RJMP _0x2060054
                 _0x2060053:
00064c 34e5      	CPI  R30,LOW(0x45)
00064d f011      	BREQ _0x2060057
00064e 36e5      	CPI  R30,LOW(0x65)
00064f f409      	BRNE _0x2060058
                 _0x2060057:
000650 c002      	RJMP _0x2060059
                 _0x2060058:
000651 36e6      	CPI  R30,LOW(0x66)
000652 f5a9      	BRNE _0x206005A
                 _0x2060059:
000653 d36a      	RCALL SUBOPT_0x3D
000654 d36e      	RCALL SUBOPT_0x3E
000655 d61b      	RCALL __GETD1P
000656 d373      	RCALL SUBOPT_0x3F
000657 d377      	RCALL SUBOPT_0x40
000658 85ad      	LDD  R26,Y+13
000659 23aa      	TST  R26
00065a f032      	BRMI _0x206005B
00065b 89ad      	LDD  R26,Y+21
00065c 32ab      	CPI  R26,LOW(0x2B)
00065d f041      	BREQ _0x206005D
00065e 32a0      	CPI  R26,LOW(0x20)
00065f f061      	BREQ _0x206005F
000660 c012      	RJMP _0x2060060
                 _0x206005B:
000661 d36f      	RCALL SUBOPT_0x41
000662 d3ae      	RCALL __ANEGF1
000663 d366      	RCALL SUBOPT_0x3F
000664 e2ed      	LDI  R30,LOW(45)
000665 8bed      	STD  Y+21,R30
                 _0x206005D:
000666 ff07      	SBRS R16,7
000667 c004      	RJMP _0x2060061
000668 89ed      	LDD  R30,Y+21
000669 93ea      	ST   -Y,R30
00066a d34d      	RCALL SUBOPT_0x3C
00066b c007      	RJMP _0x2060062
                 _0x2060061:
                 _0x206005F:
00066c 85ee      	LDD  R30,Y+14
00066d 85ff      	LDD  R31,Y+14+1
00066e 9631      	ADIW R30,1
00066f d366      	RCALL SUBOPT_0x42
000670 9731      	SBIW R30,1
000671 89ad      	LDD  R26,Y+21
000672 83a0      	STD  Z+0,R26
                 _0x2060062:
                 _0x2060060:
000673 ff05      	SBRS R16,5
000674 e046      	LDI  R20,LOW(6)
000675 3626      	CPI  R18,102
000676 f439      	BRNE _0x2060064
000677 d359      	RCALL SUBOPT_0x41
000678 d617      	RCALL __PUTPARD1
000679 934a      	ST   -Y,R20
00067a 89ab      	LDD  R26,Y+19
00067b 89bc      	LDD  R27,Y+19+1
00067c de1f      	RCALL _ftoa
00067d c007      	RJMP _0x2060065
                 _0x2060064:
00067e d352      	RCALL SUBOPT_0x41
00067f d610      	RCALL __PUTPARD1
000680 934a      	ST   -Y,R20
000681 932a      	ST   -Y,R18
000682 89ac      	LDD  R26,Y+20
000683 89bd      	LDD  R27,Y+20+1
000684 dea9      	RCALL __ftoe_G103
                 _0x2060065:
000685 d338      	RCALL SUBOPT_0x3D
000686 d352      	RCALL SUBOPT_0x43
000687 c016      	RJMP _0x2060066
                 _0x206005A:
000688 37e3      	CPI  R30,LOW(0x73)
000689 f421      	BRNE _0x2060068
00068a d344      	RCALL SUBOPT_0x40
00068b d352      	RCALL SUBOPT_0x44
00068c d34c      	RCALL SUBOPT_0x43
00068d c009      	RJMP _0x2060069
                 _0x2060068:
00068e 37e0      	CPI  R30,LOW(0x70)
00068f f499      	BRNE _0x206006B
000690 d33e      	RCALL SUBOPT_0x40
000691 d34c      	RCALL SUBOPT_0x44
000692 85ae      	LDD  R26,Y+14
000693 85bf      	LDD  R27,Y+14+1
000694 ddae      	RCALL _strlenf
000695 2f1e      	MOV  R17,R30
000696 6008      	ORI  R16,LOW(8)
                 _0x2060069:
000697 770f      	ANDI R16,LOW(127)
000698 3040      	CPI  R20,0
000699 f011      	BREQ _0x206006D
00069a 1741      	CP   R20,R17
00069b f008      	BRLO _0x206006E
                 _0x206006D:
00069c c001      	RJMP _0x206006C
                 _0x206006E:
00069d 2f14      	MOV  R17,R20
                 _0x206006C:
                 _0x2060066:
00069e e040      	LDI  R20,LOW(0)
00069f e0e0      	LDI  R30,LOW(0)
0006a0 8bec      	STD  Y+20,R30
0006a1 e030      	LDI  R19,LOW(0)
0006a2 c061      	RJMP _0x206006F
                 _0x206006B:
0006a3 36e4      	CPI  R30,LOW(0x64)
0006a4 f011      	BREQ _0x2060072
0006a5 36e9      	CPI  R30,LOW(0x69)
0006a6 f411      	BRNE _0x2060073
                 _0x2060072:
0006a7 6004      	ORI  R16,LOW(4)
0006a8 c002      	RJMP _0x2060074
                 _0x2060073:
0006a9 37e5      	CPI  R30,LOW(0x75)
0006aa f491      	BRNE _0x2060075
                 _0x2060074:
0006ab e0ea      	LDI  R30,LOW(10)
0006ac 8bec      	STD  Y+20,R30
0006ad ff01      	SBRS R16,1
0006ae c007      	RJMP _0x2060076
                +
0006af e0e0     +LDI R30 , LOW ( 0x3B9ACA00 )
0006b0 ecfa     +LDI R31 , HIGH ( 0x3B9ACA00 )
0006b1 e96a     +LDI R22 , BYTE3 ( 0x3B9ACA00 )
0006b2 e37b     +LDI R23 , BYTE4 ( 0x3B9ACA00 )
                 	__GETD1N 0x3B9ACA00
0006b3 d32e      	RCALL SUBOPT_0x45
0006b4 e01a      	LDI  R17,LOW(10)
0006b5 c01f      	RJMP _0x2060077
                 _0x2060076:
                +
0006b6 e1e0     +LDI R30 , LOW ( 0x2710 )
0006b7 e2f7     +LDI R31 , HIGH ( 0x2710 )
0006b8 e060     +LDI R22 , BYTE3 ( 0x2710 )
0006b9 e070     +LDI R23 , BYTE4 ( 0x2710 )
                 	__GETD1N 0x2710
0006ba d327      	RCALL SUBOPT_0x45
0006bb e015      	LDI  R17,LOW(5)
0006bc c018      	RJMP _0x2060077
                 _0x2060075:
0006bd 35e8      	CPI  R30,LOW(0x58)
0006be f411      	BRNE _0x2060079
0006bf 6008      	ORI  R16,LOW(8)
0006c0 c003      	RJMP _0x206007A
                 _0x2060079:
0006c1 37e8      	CPI  R30,LOW(0x78)
0006c2 f009      	BREQ PC+2
0006c3 c0ca      	RJMP _0x20600B8
                 _0x206007A:
0006c4 e1e0      	LDI  R30,LOW(16)
0006c5 8bec      	STD  Y+20,R30
0006c6 ff01      	SBRS R16,1
0006c7 c007      	RJMP _0x206007C
                +
0006c8 e0e0     +LDI R30 , LOW ( 0x10000000 )
0006c9 e0f0     +LDI R31 , HIGH ( 0x10000000 )
0006ca e060     +LDI R22 , BYTE3 ( 0x10000000 )
0006cb e170     +LDI R23 , BYTE4 ( 0x10000000 )
                 	__GETD1N 0x10000000
0006cc d315      	RCALL SUBOPT_0x45
0006cd e018      	LDI  R17,LOW(8)
0006ce c006      	RJMP _0x2060077
                 _0x206007C:
                +
0006cf e0e0     +LDI R30 , LOW ( 0x1000 )
0006d0 e1f0     +LDI R31 , HIGH ( 0x1000 )
0006d1 e060     +LDI R22 , BYTE3 ( 0x1000 )
0006d2 e070     +LDI R23 , BYTE4 ( 0x1000 )
                 	__GETD1N 0x1000
0006d3 d30e      	RCALL SUBOPT_0x45
0006d4 e014      	LDI  R17,LOW(4)
                 _0x2060077:
0006d5 3040      	CPI  R20,0
0006d6 f011      	BREQ _0x206007D
0006d7 770f      	ANDI R16,LOW(127)
0006d8 c001      	RJMP _0x206007E
                 _0x206007D:
0006d9 e041      	LDI  R20,LOW(1)
                 _0x206007E:
0006da ff01      	SBRS R16,1
0006db c005      	RJMP _0x206007F
0006dc d2f2      	RCALL SUBOPT_0x40
0006dd d2e5      	RCALL SUBOPT_0x3E
0006de 9614      	ADIW R26,4
0006df d591      	RCALL __GETD1P
0006e0 c00d      	RJMP _0x2060115
                 _0x206007F:
0006e1 ff02      	SBRS R16,2
0006e2 c006      	RJMP _0x2060081
0006e3 d2eb      	RCALL SUBOPT_0x40
0006e4 d2de      	RCALL SUBOPT_0x3E
0006e5 9614      	ADIW R26,4
0006e6 d586      	RCALL __GETW1P
0006e7 d4e4      	RCALL __CWD1
0006e8 c005      	RJMP _0x2060115
                 _0x2060081:
0006e9 d2e5      	RCALL SUBOPT_0x40
0006ea d2d8      	RCALL SUBOPT_0x3E
0006eb 9614      	ADIW R26,4
0006ec d580      	RCALL __GETW1P
0006ed d0df      	RCALL SUBOPT_0x1
                 _0x2060115:
                +
0006ee 87ea     +STD Y + 10 , R30
0006ef 87fb     +STD Y + 10 + 1 , R31
0006f0 876c     +STD Y + 10 + 2 , R22
0006f1 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
0006f2 ff02      	SBRS R16,2
0006f3 c00f      	RJMP _0x2060083
0006f4 85ad      	LDD  R26,Y+13
0006f5 23aa      	TST  R26
0006f6 f42a      	BRPL _0x2060084
0006f7 d2d9      	RCALL SUBOPT_0x41
0006f8 d4c5      	RCALL __ANEGD1
0006f9 d2d0      	RCALL SUBOPT_0x3F
0006fa e2ed      	LDI  R30,LOW(45)
0006fb 8bed      	STD  Y+21,R30
                 _0x2060084:
0006fc 89ed      	LDD  R30,Y+21
0006fd 30e0      	CPI  R30,0
0006fe f019      	BREQ _0x2060085
0006ff 5f1f      	SUBI R17,-LOW(1)
000700 5f4f      	SUBI R20,-LOW(1)
000701 c001      	RJMP _0x2060086
                 _0x2060085:
000702 7f0b      	ANDI R16,LOW(251)
                 _0x2060086:
                 _0x2060083:
000703 2f34      	MOV  R19,R20
                 _0x206006F:
000704 fd00      	SBRC R16,0
000705 c013      	RJMP _0x2060087
                 _0x2060088:
000706 1715      	CP   R17,R21
000707 f410      	BRSH _0x206008B
000708 1735      	CP   R19,R21
000709 f008      	BRLO _0x206008C
                 _0x206008B:
00070a c00e      	RJMP _0x206008A
                 _0x206008C:
00070b ff07      	SBRS R16,7
00070c c008      	RJMP _0x206008D
00070d ff02      	SBRS R16,2
00070e c004      	RJMP _0x206008E
00070f 7f0b      	ANDI R16,LOW(251)
000710 892d      	LDD  R18,Y+21
000711 5011      	SUBI R17,LOW(1)
000712 c001      	RJMP _0x206008F
                 _0x206008E:
000713 e320      	LDI  R18,LOW(48)
                 _0x206008F:
000714 c001      	RJMP _0x2060090
                 _0x206008D:
000715 e220      	LDI  R18,LOW(32)
                 _0x2060090:
000716 d28c      	RCALL SUBOPT_0x39
000717 5051      	SUBI R21,LOW(1)
000718 cfed      	RJMP _0x2060088
                 _0x206008A:
                 _0x2060087:
                 _0x2060091:
000719 1714      	CP   R17,R20
00071a f480      	BRSH _0x2060093
00071b 6100      	ORI  R16,LOW(16)
00071c ff02      	SBRS R16,2
00071d c005      	RJMP _0x2060094
00071e d2c8      	RCALL SUBOPT_0x46
00071f f009      	BREQ _0x2060095
000720 5051      	SUBI R21,LOW(1)
                 _0x2060095:
000721 5011      	SUBI R17,LOW(1)
000722 5041      	SUBI R20,LOW(1)
                 _0x2060094:
000723 e3e0      	LDI  R30,LOW(48)
000724 93ea      	ST   -Y,R30
000725 d292      	RCALL SUBOPT_0x3C
000726 3050      	CPI  R21,0
000727 f009      	BREQ _0x2060096
000728 5051      	SUBI R21,LOW(1)
                 _0x2060096:
000729 5041      	SUBI R20,LOW(1)
00072a cfee      	RJMP _0x2060091
                 _0x2060093:
00072b 2f31      	MOV  R19,R17
00072c 89ec      	LDD  R30,Y+20
00072d 30e0      	CPI  R30,0
00072e f4a9      	BRNE _0x2060097
                 _0x2060098:
00072f 3030      	CPI  R19,0
000730 f091      	BREQ _0x206009A
000731 ff03      	SBRS R16,3
000732 c005      	RJMP _0x206009B
000733 85ee      	LDD  R30,Y+14
000734 85ff      	LDD  R31,Y+14+1
000735 9125      	LPM  R18,Z+
000736 d29f      	RCALL SUBOPT_0x42
000737 c005      	RJMP _0x206009C
                 _0x206009B:
000738 85ae      	LDD  R26,Y+14
000739 85bf      	LDD  R27,Y+14+1
00073a 912d      	LD   R18,X+
00073b 87ae      	STD  Y+14,R26
00073c 87bf      	STD  Y+14+1,R27
                 _0x206009C:
00073d d265      	RCALL SUBOPT_0x39
00073e 3050      	CPI  R21,0
00073f f009      	BREQ _0x206009D
000740 5051      	SUBI R21,LOW(1)
                 _0x206009D:
000741 5031      	SUBI R19,LOW(1)
000742 cfec      	RJMP _0x2060098
                 _0x206009A:
000743 c041      	RJMP _0x206009E
                 _0x2060097:
                 _0x20600A0:
000744 d2b4      	RCALL SUBOPT_0x47
000745 d4d3      	RCALL __DIVD21U
000746 2f2e      	MOV  R18,R30
000747 302a      	CPI  R18,10
000748 f030      	BRLO _0x20600A2
000749 ff03      	SBRS R16,3
00074a c002      	RJMP _0x20600A3
00074b 5c29      	SUBI R18,-LOW(55)
00074c c001      	RJMP _0x20600A4
                 _0x20600A3:
00074d 5a29      	SUBI R18,-LOW(87)
                 _0x20600A4:
00074e c001      	RJMP _0x20600A5
                 _0x20600A2:
00074f 5d20      	SUBI R18,-LOW(48)
                 _0x20600A5:
000750 fd04      	SBRC R16,4
000751 c01d      	RJMP _0x20600A7
000752 3321      	CPI  R18,49
000753 f448      	BRSH _0x20600A9
000754 d2ad      	RCALL SUBOPT_0x48
                +
000755 30a1     +CPI R26 , LOW ( 0x1 )
000756 e0e0     +LDI R30 , HIGH ( 0x1 )
000757 07be     +CPC R27 , R30
000758 e0e0     +LDI R30 , BYTE3 ( 0x1 )
000759 078e     +CPC R24 , R30
00075a e0e0     +LDI R30 , BYTE4 ( 0x1 )
00075b 079e     +CPC R25 , R30
                 	__CPD2N 0x1
00075c f409      	BRNE _0x20600A8
                 _0x20600A9:
00075d c00b      	RJMP _0x20600AB
                 _0x20600A8:
00075e 1743      	CP   R20,R19
00075f f440      	BRSH _0x2060116
000760 1753      	CP   R21,R19
000761 f010      	BRLO _0x20600AE
000762 ff00      	SBRS R16,0
000763 c001      	RJMP _0x20600AF
                 _0x20600AE:
000764 c00e      	RJMP _0x20600AD
                 _0x20600AF:
000765 e220      	LDI  R18,LOW(32)
000766 ff07      	SBRS R16,7
000767 c007      	RJMP _0x20600B0
                 _0x2060116:
000768 e320      	LDI  R18,LOW(48)
                 _0x20600AB:
000769 6100      	ORI  R16,LOW(16)
00076a ff02      	SBRS R16,2
00076b c003      	RJMP _0x20600B1
00076c d27a      	RCALL SUBOPT_0x46
00076d f009      	BREQ _0x20600B2
00076e 5051      	SUBI R21,LOW(1)
                 _0x20600B2:
                 _0x20600B1:
                 _0x20600B0:
                 _0x20600A7:
00076f d233      	RCALL SUBOPT_0x39
000770 3050      	CPI  R21,0
000771 f009      	BREQ _0x20600B3
000772 5051      	SUBI R21,LOW(1)
                 _0x20600B3:
                 _0x20600AD:
000773 5031      	SUBI R19,LOW(1)
000774 d284      	RCALL SUBOPT_0x47
000775 d4d4      	RCALL __MODD21U
000776 d253      	RCALL SUBOPT_0x3F
000777 89ec      	LDD  R30,Y+20
000778 d289      	RCALL SUBOPT_0x48
000779 27ff      	CLR  R31
00077a 2766      	CLR  R22
00077b 2777      	CLR  R23
00077c d49c      	RCALL __DIVD21U
00077d d264      	RCALL SUBOPT_0x45
                +
00077e 89e8     +LDD R30 , Y + 16
00077f 89f9     +LDD R31 , Y + 16 + 1
000780 896a     +LDD R22 , Y + 16 + 2
000781 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
000782 d529      	RCALL __CPD10
000783 f009      	BREQ _0x20600A1
000784 cfbf      	RJMP _0x20600A0
                 _0x20600A1:
                 _0x206009E:
000785 ff00      	SBRS R16,0
000786 c007      	RJMP _0x20600B4
                 _0x20600B5:
000787 3050      	CPI  R21,0
000788 f029      	BREQ _0x20600B7
000789 5051      	SUBI R21,LOW(1)
00078a e2e0      	LDI  R30,LOW(32)
00078b 93ea      	ST   -Y,R30
00078c d22b      	RCALL SUBOPT_0x3C
00078d cff9      	RJMP _0x20600B5
                 _0x20600B7:
                 _0x20600B4:
                 _0x20600B8:
                 _0x2060054:
                 _0x2060114:
00078e e010      	LDI  R17,LOW(0)
                 _0x2060035:
00078f ce51      	RJMP _0x2060030
                 _0x2060032:
000790 d0a6      	RCALL SUBOPT_0x16
000791 d4db      	RCALL __GETW1P
000792 d528      	RCALL __LOADLOCR6
000793 96ef      	ADIW R28,63
000794 966f      	ADIW R28,31
000795 9508      	RET
                 ; .FEND
                 _printf:
                 ; .FSTART _printf
000796 92ff      	PUSH R15
000797 2ef8      	MOV  R15,R24
000798 9726      	SBIW R28,6
000799 d51e      	RCALL __SAVELOCR2
00079a 01de      	MOVW R26,R28
00079b 9614      	ADIW R26,4
00079c d41d      	RCALL __ADDW2R15
00079d 018d      	MOVW R16,R26
00079e e0e0      	LDI  R30,LOW(0)
00079f 83ec      	STD  Y+4,R30
0007a0 83ed      	STD  Y+4+1,R30
0007a1 83ee      	STD  Y+6,R30
0007a2 83ef      	STD  Y+6+1,R30
0007a3 01de      	MOVW R26,R28
0007a4 9618      	ADIW R26,8
0007a5 d414      	RCALL __ADDW2R15
0007a6 d4c6      	RCALL __GETW1P
0007a7 d06c      	RCALL SUBOPT_0xF
0007a8 931a      	ST   -Y,R17
0007a9 930a      	ST   -Y,R16
0007aa e2e6      	LDI  R30,LOW(_put_usart_G103)
0007ab e0f5      	LDI  R31,HIGH(_put_usart_G103)
0007ac d067      	RCALL SUBOPT_0xF
0007ad 01de      	MOVW R26,R28
0007ae 9618      	ADIW R26,8
0007af de17      	RCALL __print_G103
0007b0 d50e      	RCALL __LOADLOCR2
0007b1 9628      	ADIW R28,8
0007b2 90ff      	POP  R15
0007b3 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 _isdigit:
                 ; .FSTART _isdigit
0007b4 93aa      	ST   -Y,R26
0007b5 e0e1          ldi  r30,1
0007b6 91f9          ld   r31,y+
0007b7 33f0          cpi  r31,'0'
0007b8 f010          brlo isdigit0
0007b9 33fa          cpi  r31,'9'+1
0007ba f008          brlo isdigit1
                 isdigit0:
0007bb 27ee          clr  r30
                 isdigit1:
0007bc 9508          ret
                 ; .FEND
                 _isspace:
                 ; .FSTART _isspace
0007bd 93aa      	ST   -Y,R26
0007be e0e1          ldi  r30,1
0007bf 91f9          ld   r31,y+
0007c0 32f0          cpi  r31,' '
0007c1 f029          breq isspace1
0007c2 30f9          cpi  r31,9
0007c3 f010          brlo isspace0
0007c4 30fe          cpi  r31,13+1
0007c5 f008          brlo isspace1
                 isspace0:
0007c6 27ee          clr  r30
                 isspace1:
0007c7 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _error:
000160           	.BYTE 0x4
                 _pre_error:
000164           	.BYTE 0x4
                 _Pout:
000168           	.BYTE 0x4
                 _Iout:
00016c           	.BYTE 0x4
                 _Dout:
000170           	.BYTE 0x4
                 _out:
000174           	.BYTE 0x4
                 _integral:
000178           	.BYTE 0x4
                 _derivative:
00017c           	.BYTE 0x4
                 _Kd:
000180           	.BYTE 0x2
                 _ADC_val_0:
000182           	.BYTE 0x4
                 _ADC_val_1:
000186           	.BYTE 0x4
                 _Volt_0:
00018a           	.BYTE 0x4
                 _Weight_0:
00018e           	.BYTE 0x4
                 _Volt_1:
000192           	.BYTE 0x4
                 _Weight_1:
000196           	.BYTE 0x4
                 _str2:
00019a           	.BYTE 0x14
                 _function:
0001ae           	.BYTE 0x190
                 _number:
00033e           	.BYTE 0x2
                 _i:
000340           	.BYTE 0x2
                 _j:
000342           	.BYTE 0x2
                 _l:
000344           	.BYTE 0x2
                 _spd1:
000346           	.BYTE 0x4
                 _spd3:
00034a           	.BYTE 0x4
                 _spd4:
00034e           	.BYTE 0x4
                 _Ts:
000352           	.BYTE 0x4
                 _cmd:
000356           	.BYTE 0x2
                 _output:
000358           	.BYTE 0x4
                 _func_prevnumber:
00035c           	.BYTE 0x2
                 _func_number:
00035e           	.BYTE 0x2
                 _timer_cnt:
000360           	.BYTE 0x4
                 _capture_pulse:
000364           	.BYTE 0x4
                 _rx_buffer:
000368           	.BYTE 0x8
                 _rx_wr_index:
000370           	.BYTE 0x1
                 _rx_rd_index:
000371           	.BYTE 0x1
                 _rx_counter:
000372           	.BYTE 0x1
                 __seed_G102:
000373           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x0:
0007c8 93ea      	ST   -Y,R30
0007c9 93fa      	ST   -Y,R31
0007ca b7ef      	IN   R30,SREG
0007cb 93ea      	ST   -Y,R30
0007cc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
0007cd 2766      	CLR  R22
0007ce 2777      	CLR  R23
0007cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2:
0007d0 d4c4      	RCALL __PUTPARD2
0007d1 d4b4      	RCALL __GETD2S0
0007d2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x3:
                +
0007d3 81ec     +LDD R30 , Y + 4
0007d4 81fd     +LDD R31 , Y + 4 + 1
0007d5 816e     +LDD R22 , Y + 4 + 2
0007d6 817f     +LDD R23 , Y + 4 + 3
                 	__GETD1S 4
0007d7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x4:
0007d8 91e0 0160 	LDS  R30,_error
0007da 91f0 0161 	LDS  R31,_error+1
0007dc 9160 0162 	LDS  R22,_error+2
0007de 9170 0163 	LDS  R23,_error+3
0007e0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x5:
0007e1 d3ef      	RCALL __CWD2
0007e2 d4b9      	RCALL __CDF2
0007e3 d323      	RCALL __MULF12
0007e4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x6:
0007e5 d3e6      	RCALL __CWD1
0007e6 d296      	RCALL __CDF1
0007e7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x7:
0007e8 01df      	MOVW R26,R30
0007e9 01cb      	MOVW R24,R22
0007ea 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x8:
                +
0007eb eced     +LDI R30 , LOW ( 0x3DCCCCCD )
0007ec ecfc     +LDI R31 , HIGH ( 0x3DCCCCCD )
0007ed ec6c     +LDI R22 , BYTE3 ( 0x3DCCCCCD )
0007ee e37d     +LDI R23 , BYTE4 ( 0x3DCCCCCD )
                 	__GETD1N 0x3DCCCCCD
0007ef 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x9:
0007f0 91a0 0174 	LDS  R26,_out
0007f2 91b0 0175 	LDS  R27,_out+1
0007f4 9180 0176 	LDS  R24,_out+2
0007f6 9190 0177 	LDS  R25,_out+3
0007f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
                +
0007f9 e0e0     +LDI R30 , LOW ( 0x437F0000 )
0007fa e0f0     +LDI R31 , HIGH ( 0x437F0000 )
0007fb e76f     +LDI R22 , BYTE3 ( 0x437F0000 )
0007fc e473     +LDI R23 , BYTE4 ( 0x437F0000 )
                 	__GETD1N 0x437F0000
0007fd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:22 WORDS
                 SUBOPT_0xB:
                +
0007fe e0e0     +LDI R30 , LOW ( 0x41200000 )
0007ff e0f0     +LDI R31 , HIGH ( 0x41200000 )
000800 e260     +LDI R22 , BYTE3 ( 0x41200000 )
000801 e471     +LDI R23 , BYTE4 ( 0x41200000 )
                 	__GETD1N 0x41200000
000802 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xC:
000803 e0e0      	LDI  R30,LOW(0)
000804 93e0 0340 	STS  _i,R30
000806 93e0 0341 	STS  _i+1,R30
000808 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xD:
000809 91a0 0340 	LDS  R26,_i
00080b 91b0 0341 	LDS  R27,_i+1
00080d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
00080e dffa      	RCALL SUBOPT_0xD
00080f e3e2      	LDI  R30,LOW(50)
000810 d3ea      	RCALL __MULB1W2U
000811 55e2      	SUBI R30,LOW(-_function)
000812 4ffe      	SBCI R31,HIGH(-_function)
000813 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 24 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0xF:
000814 93fa      	ST   -Y,R31
000815 93ea      	ST   -Y,R30
000816 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x10:
000817 91e0 033e 	LDS  R30,_number
000819 91f0 033f 	LDS  R31,_number+1
00081b 9730      	SBIW R30,0
00081c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x11:
00081d 91e0 0340 	LDS  R30,_i
00081f 91f0 0341 	LDS  R31,_i+1
000821 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x12:
000822 91a0 033e 	LDS  R26,_number
000824 91b0 033f 	LDS  R27,_number+1
000826 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x13:
000827 91ed      	LD   R30,X+
000828 91fd      	LD   R31,X+
000829 9631      	ADIW R30,1
00082a 93fe      	ST   -X,R31
00082b 93ee      	ST   -X,R30
00082c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 15 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x14:
00082d 93ba      	ST   -Y,R27
00082e 93aa      	ST   -Y,R26
00082f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
000830 81ea      	LDD  R30,Y+2
000831 81fb      	LDD  R31,Y+2+1
000832 93e0 0344 	STS  _l,R30
000834 93f0 0345 	STS  _l+1,R31
000836 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x16:
000837 81ae      	LDD  R26,Y+6
000838 81bf      	LDD  R27,Y+6+1
000839 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x17:
00083a 91e0 0356 	LDS  R30,_cmd
00083c 91f0 0357 	LDS  R31,_cmd+1
00083e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:86 WORDS
                 SUBOPT_0x18:
00083f d9d4      	RCALL _PID_controller
000840 93e0 0358 	STS  _output,R30
000842 93f0 0359 	STS  _output+1,R31
000844 9360 035a 	STS  _output+2,R22
000846 9370 035b 	STS  _output+3,R23
000848 d1fb      	RCALL __CFD1U
000849 bde3      	OUT  0x23,R30
00084a 2444      	CLR  R4
00084b 2455      	CLR  R5
00084c 2466      	CLR  R6
00084d 2477      	CLR  R7
00084e e0e0      	LDI  R30,LOW(0)
00084f 93e0 0364 	STS  _capture_pulse,R30
000851 93e0 0365 	STS  _capture_pulse+1,R30
000853 93e0 0366 	STS  _capture_pulse+2,R30
000855 93e0 0367 	STS  _capture_pulse+3,R30
                +
000857 e9e6     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
000858 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
000859 dfba      	RCALL SUBOPT_0xF
00085a dfdf      	RCALL SUBOPT_0x17
00085b d370      	RCALL __CWD1
00085c d433      	RCALL __PUTPARD1
00085d e084      	LDI  R24,4
00085e df37      	RCALL _printf
00085f 9626      	ADIW R28,6
                +
000860 e9ea     +LDI R30 , LOW ( 2 * _0x0 + ( 4 ) )
000861 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 4 ) )
                 	__POINTW1FN _0x0,4
000862 cfb1      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x19:
000863 d42c      	RCALL __PUTPARD1
000864 e084      	LDI  R24,4
000865 df30      	RCALL _printf
000866 9626      	ADIW R28,6
000867 e0e1      	LDI  R30,LOW(1)
000868 e0f0      	LDI  R31,HIGH(1)
000869 15e8      	CP   R30,R8
00086a 05f9      	CPC  R31,R9
00086b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:116 WORDS
                 SUBOPT_0x1A:
00086c e0a0      	LDI  R26,LOW(0)
00086d d926      	RCALL _read_adc
00086e df5e      	RCALL SUBOPT_0x1
00086f 93e0 0182 	STS  _ADC_val_0,R30
000871 93f0 0183 	STS  _ADC_val_0+1,R31
000873 9360 0184 	STS  _ADC_val_0+2,R22
000875 9370 0185 	STS  _ADC_val_0+3,R23
                +
000877 e0a5     +LDI R26 , LOW ( 0x5 )
000878 e0b0     +LDI R27 , HIGH ( 0x5 )
000879 e080     +LDI R24 , BYTE3 ( 0x5 )
00087a e090     +LDI R25 , BYTE4 ( 0x5 )
                 	__GETD2N 0x5
00087b d385      	RCALL __MULD12
00087c d200      	RCALL __CDF1
00087d df6a      	RCALL SUBOPT_0x7
                +
00087e e0e0     +LDI R30 , LOW ( 0x447FC000 )
00087f ecf0     +LDI R31 , HIGH ( 0x447FC000 )
000880 e76f     +LDI R22 , BYTE3 ( 0x447FC000 )
000881 e474     +LDI R23 , BYTE4 ( 0x447FC000 )
                 	__GETD1N 0x447FC000
000882 d2d2      	RCALL __DIVF21
000883 93e0 018a 	STS  _Volt_0,R30
000885 93f0 018b 	STS  _Volt_0+1,R31
000887 9360 018c 	STS  _Volt_0+2,R22
000889 9370 018d 	STS  _Volt_0+3,R23
00088b 91a0 018a 	LDS  R26,_Volt_0
00088d 91b0 018b 	LDS  R27,_Volt_0+1
00088f 9180 018c 	LDS  R24,_Volt_0+2
000891 9190 018d 	LDS  R25,_Volt_0+3
                +
000893 eced     +LDI R30 , LOW ( 0x3D4CCCCD )
000894 ecfc     +LDI R31 , HIGH ( 0x3D4CCCCD )
000895 e46c     +LDI R22 , BYTE3 ( 0x3D4CCCCD )
000896 e37d     +LDI R23 , BYTE4 ( 0x3D4CCCCD )
                 	__GETD1N 0x3D4CCCCD
000897 d2bd      	RCALL __DIVF21
000898 93e0 018e 	STS  _Weight_0,R30
00089a 93f0 018f 	STS  _Weight_0+1,R31
00089c 9360 0190 	STS  _Weight_0+2,R22
00089e 9370 0191 	STS  _Weight_0+3,R23
0008a0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:50 WORDS
                 SUBOPT_0x1B:
0008a1 df72      	RCALL SUBOPT_0xF
0008a2 91e0 0182 	LDS  R30,_ADC_val_0
0008a4 91f0 0183 	LDS  R31,_ADC_val_0+1
0008a6 9160 0184 	LDS  R22,_ADC_val_0+2
0008a8 9170 0185 	LDS  R23,_ADC_val_0+3
0008aa d3e5      	RCALL __PUTPARD1
0008ab 91e0 018a 	LDS  R30,_Volt_0
0008ad 91f0 018b 	LDS  R31,_Volt_0+1
0008af 9160 018c 	LDS  R22,_Volt_0+2
0008b1 9170 018d 	LDS  R23,_Volt_0+3
0008b3 d3dc      	RCALL __PUTPARD1
0008b4 91e0 018e 	LDS  R30,_Weight_0
0008b6 91f0 018f 	LDS  R31,_Weight_0+1
0008b8 9160 0190 	LDS  R22,_Weight_0+2
0008ba 9170 0191 	LDS  R23,_Weight_0+3
0008bc 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:174 WORDS
                 SUBOPT_0x1C:
0008bd e0a1      	LDI  R26,LOW(1)
0008be d8d5      	RCALL _read_adc
0008bf df0d      	RCALL SUBOPT_0x1
0008c0 93e0 0186 	STS  _ADC_val_1,R30
0008c2 93f0 0187 	STS  _ADC_val_1+1,R31
0008c4 9360 0188 	STS  _ADC_val_1+2,R22
0008c6 9370 0189 	STS  _ADC_val_1+3,R23
                +
0008c8 e0a5     +LDI R26 , LOW ( 0x5 )
0008c9 e0b0     +LDI R27 , HIGH ( 0x5 )
0008ca e080     +LDI R24 , BYTE3 ( 0x5 )
0008cb e090     +LDI R25 , BYTE4 ( 0x5 )
                 	__GETD2N 0x5
0008cc d334      	RCALL __MULD12
0008cd d1af      	RCALL __CDF1
0008ce df19      	RCALL SUBOPT_0x7
                +
0008cf e0e0     +LDI R30 , LOW ( 0x447FC000 )
0008d0 ecf0     +LDI R31 , HIGH ( 0x447FC000 )
0008d1 e76f     +LDI R22 , BYTE3 ( 0x447FC000 )
0008d2 e474     +LDI R23 , BYTE4 ( 0x447FC000 )
                 	__GETD1N 0x447FC000
0008d3 d281      	RCALL __DIVF21
0008d4 93e0 0192 	STS  _Volt_1,R30
0008d6 93f0 0193 	STS  _Volt_1+1,R31
0008d8 9360 0194 	STS  _Volt_1+2,R22
0008da 9370 0195 	STS  _Volt_1+3,R23
0008dc 91a0 0192 	LDS  R26,_Volt_1
0008de 91b0 0193 	LDS  R27,_Volt_1+1
0008e0 9180 0194 	LDS  R24,_Volt_1+2
0008e2 9190 0195 	LDS  R25,_Volt_1+3
                +
0008e4 eced     +LDI R30 , LOW ( 0x3D4CCCCD )
0008e5 ecfc     +LDI R31 , HIGH ( 0x3D4CCCCD )
0008e6 e46c     +LDI R22 , BYTE3 ( 0x3D4CCCCD )
0008e7 e37d     +LDI R23 , BYTE4 ( 0x3D4CCCCD )
                 	__GETD1N 0x3D4CCCCD
0008e8 d26c      	RCALL __DIVF21
0008e9 93e0 0196 	STS  _Weight_1,R30
0008eb 93f0 0197 	STS  _Weight_1+1,R31
0008ed 9360 0198 	STS  _Weight_1+2,R22
0008ef 9370 0199 	STS  _Weight_1+3,R23
                +
0008f1 ebe3     +LDI R30 , LOW ( 2 * _0x0 + ( 29 ) )
0008f2 e0f1     +LDI R31 , HIGH ( 2 * _0x0 + ( 29 ) )
                 	__POINTW1FN _0x0,29
0008f3 df20      	RCALL SUBOPT_0xF
0008f4 91e0 0186 	LDS  R30,_ADC_val_1
0008f6 91f0 0187 	LDS  R31,_ADC_val_1+1
0008f8 9160 0188 	LDS  R22,_ADC_val_1+2
0008fa 9170 0189 	LDS  R23,_ADC_val_1+3
0008fc d393      	RCALL __PUTPARD1
0008fd 91e0 0192 	LDS  R30,_Volt_1
0008ff 91f0 0193 	LDS  R31,_Volt_1+1
000901 9160 0194 	LDS  R22,_Volt_1+2
000903 9170 0195 	LDS  R23,_Volt_1+3
000905 d38a      	RCALL __PUTPARD1
000906 91e0 0196 	LDS  R30,_Weight_1
000908 91f0 0197 	LDS  R31,_Weight_1+1
00090a 9160 0198 	LDS  R22,_Weight_1+2
00090c 9170 0199 	LDS  R23,_Weight_1+3
00090e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x1D:
00090f e08c      	LDI  R24,12
000910 de85      	RCALL _printf
000911 962e      	ADIW R28,14
000912 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x1E:
000913 d1f3      	RCALL __MULF12
000914 01df      	MOVW R26,R30
000915 01cb      	MOVW R24,R22
000916 91e0 0352 	LDS  R30,_Ts
000918 91f0 0353 	LDS  R31,_Ts+1
00091a 9160 0354 	LDS  R22,_Ts+2
00091c 9170 0355 	LDS  R23,_Ts+3
00091e d15e      	RCALL __CDF1
00091f d235      	RCALL __DIVF21
000920 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1F:
000921 d35f      	RCALL __GETD1S0
000922 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x20:
000923 df09      	RCALL SUBOPT_0x14
000924 9724      	SBIW R28,4
000925 e0e0      	LDI  R30,LOW(0)
000926 83e8      	ST   Y,R30
000927 83e9      	STD  Y+1,R30
000928 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x21:
000929 81ee      	LDD  R30,Y+6
00092a 81ff      	LDD  R31,Y+6+1
00092b cee8      	RJMP SUBOPT_0xF
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x22:
                +
00092c 85e9     +LDD R30 , Y + 9
00092d 85fa     +LDD R31 , Y + 9 + 1
00092e 856b     +LDD R22 , Y + 9 + 2
00092f 857c     +LDD R23 , Y + 9 + 3
                 	__GETD1S 9
000930 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x23:
                +
000931 87e9     +STD Y + 9 , R30
000932 87fa     +STD Y + 9 + 1 , R31
000933 876b     +STD Y + 9 + 2 , R22
000934 877c     +STD Y + 9 + 3 , R23
                 	__PUTD1S 9
000935 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x24:
000936 df00      	RCALL SUBOPT_0x16
000937 9611      	ADIW R26,1
000938 83ae      	STD  Y+6,R26
000939 83bf      	STD  Y+6+1,R27
00093a 9711      	SBIW R26,1
00093b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x25:
00093c 2fe1      	MOV  R30,R17
00093d 5011      	SUBI R17,1
00093e 30e0      	CPI  R30,0
00093f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x26:
                +
000940 81aa     +LDD R26 , Y + 2
000941 81bb     +LDD R27 , Y + 2 + 1
000942 818c     +LDD R24 , Y + 2 + 2
000943 819d     +LDD R25 , Y + 2 + 3
                 	__GETD2S 2
000944 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x27:
000945 dea5      	RCALL SUBOPT_0x8
000946 d1c0      	RCALL __MULF12
000947 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x28:
                +
000948 83ea     +STD Y + 2 , R30
000949 83fb     +STD Y + 2 + 1 , R31
00094a 836c     +STD Y + 2 + 2 , R22
00094b 837d     +STD Y + 2 + 3 , R23
                 	__PUTD1S 2
00094c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x29:
                +
00094d 81ea     +LDD R30 , Y + 2
00094e 81fb     +LDD R31 , Y + 2 + 1
00094f 816c     +LDD R22 , Y + 2 + 2
000950 817d     +LDD R23 , Y + 2 + 3
                 	__GETD1S 2
                +
000951 85a9     +LDD R26 , Y + 9
000952 85ba     +LDD R27 , Y + 9 + 1
000953 858b     +LDD R24 , Y + 9 + 2
000954 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000955 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2A:
000956 dea7      	RCALL SUBOPT_0xB
000957 d1af      	RCALL __MULF12
000958 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x2B:
                +
000959 e0a0     +LDI R26 , LOW ( 0x3F000000 )
00095a e0b0     +LDI R27 , HIGH ( 0x3F000000 )
00095b e080     +LDI R24 , BYTE3 ( 0x3F000000 )
00095c e39f     +LDI R25 , BYTE4 ( 0x3F000000 )
                 	__GETD2N 0x3F000000
00095d d159      	RCALL __ADDF12
00095e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2C:
00095f 2fe0      	MOV  R30,R16
000960 5de0      	SUBI R30,-LOW(48)
000961 93ec      	ST   X,R30
000962 2fe0      	MOV  R30,R16
000963 e0f0      	LDI  R31,0
000964 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2D:
                +
000965 85a9     +LDD R26 , Y + 9
000966 85ba     +LDD R27 , Y + 9 + 1
000967 858b     +LDD R24 , Y + 9 + 2
000968 859c     +LDD R25 , Y + 9 + 3
                 	__GETD2S 9
000969 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x2E:
00096a 85e8      	LDD  R30,Y+8
00096b 85f9      	LDD  R31,Y+8+1
00096c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x2F:
                +
00096d 81ac     +LDD R26 , Y + 4
00096e 81bd     +LDD R27 , Y + 4 + 1
00096f 818e     +LDD R24 , Y + 4 + 2
000970 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000971 cfe4      	RJMP SUBOPT_0x2A
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x30:
                +
000972 83ec     +STD Y + 4 , R30
000973 83fd     +STD Y + 4 + 1 , R31
000974 836e     +STD Y + 4 + 2 , R22
000975 837f     +STD Y + 4 + 3 , R23
                 	__PUTD1S 4
000976 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x31:
                +
000977 85ec     +LDD R30 , Y + 12
000978 85fd     +LDD R31 , Y + 12 + 1
000979 856e     +LDD R22 , Y + 12 + 2
00097a 857f     +LDD R23 , Y + 12 + 3
                 	__GETD1S 12
00097b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x32:
00097c de56      	RCALL SUBOPT_0x3
                +
00097d 85ac     +LDD R26 , Y + 12
00097e 85bd     +LDD R27 , Y + 12 + 1
00097f 858e     +LDD R24 , Y + 12 + 2
000980 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000981 d218      	RCALL __CMPF12
000982 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x33:
                +
000983 85ac     +LDD R26 , Y + 12
000984 85bd     +LDD R27 , Y + 12 + 1
000985 858e     +LDD R24 , Y + 12 + 2
000986 859f     +LDD R25 , Y + 12 + 3
                 	__GETD2S 12
000987 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x34:
                +
000988 87ec     +STD Y + 12 , R30
000989 87fd     +STD Y + 12 + 1 , R31
00098a 876e     +STD Y + 12 + 2 , R22
00098b 877f     +STD Y + 12 + 3 , R23
                 	__PUTD1S 12
00098c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x35:
                +
00098d 81ac     +LDD R26 , Y + 4
00098e 81bd     +LDD R27 , Y + 4 + 1
00098f 818e     +LDD R24 , Y + 4 + 2
000990 819f     +LDD R25 , Y + 4 + 3
                 	__GETD2S 4
000991 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x36:
000992 85a8      	LDD  R26,Y+8
000993 85b9      	LDD  R27,Y+8+1
000994 9611      	ADIW R26,1
000995 87a8      	STD  Y+8,R26
000996 87b9      	STD  Y+8+1,R27
000997 9711      	SBIW R26,1
000998 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x37:
000999 dfd0      	RCALL SUBOPT_0x2E
00099a 9631      	ADIW R30,1
00099b 87e8      	STD  Y+8,R30
00099c 87f9      	STD  Y+8+1,R31
00099d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x38:
00099e 9731      	SBIW R30,1
00099f 01bf      	MOVW R22,R30
0009a0 2fa3      	MOV  R26,R19
0009a1 e0ea      	LDI  R30,LOW(10)
0009a2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:18 WORDS
                 SUBOPT_0x39:
0009a3 932a      	ST   -Y,R18
0009a4 81af      	LDD  R26,Y+7
0009a5 85b8      	LDD  R27,Y+7+1
0009a6 85e9      	LDD  R30,Y+9
0009a7 85fa      	LDD  R31,Y+9+1
0009a8 9509      	ICALL
0009a9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:33 WORDS
                 SUBOPT_0x3A:
                +
0009aa 01fe     +MOVW R30 , R28
0009ab 5ae6     +SUBI R30 , LOW ( - 90 )
0009ac 4fff     +SBCI R31 , HIGH ( - 90 )
0009ad 9001     +LD R0 , Z +
0009ae 81f0     +LD R31 , Z
0009af 2de0     +MOV R30 , R0
                 	__GETW1SX 90
0009b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 7 TIMES, CODE SIZE REDUCTION:28 WORDS
                 SUBOPT_0x3B:
0009b1 9734      	SBIW R30,4
                +
0009b2 01de     +MOVW R26 , R28
0009b3 5aa6     +SUBI R26 , LOW ( - 90 )
0009b4 4fbf     +SBCI R27 , HIGH ( - 90 )
0009b5 93ed     +ST X + , R30
0009b6 93fc     +ST X , R31
                 	__PUTW1SX 90
0009b7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x3C:
0009b8 81af      	LDD  R26,Y+7
0009b9 85b8      	LDD  R27,Y+7+1
0009ba 85e9      	LDD  R30,Y+9
0009bb 85fa      	LDD  R31,Y+9+1
0009bc 9509      	ICALL
0009bd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3D:
0009be 01fe      	MOVW R30,R28
0009bf 9676      	ADIW R30,22
0009c0 87ee      	STD  Y+14,R30
0009c1 87ff      	STD  Y+14+1,R31
0009c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x3E:
                +
0009c3 01de     +MOVW R26 , R28
0009c4 5aa6     +SUBI R26 , LOW ( - 90 )
0009c5 4fbf     +SBCI R27 , HIGH ( - 90 )
0009c6 900d     +LD R0 , X +
0009c7 91bc     +LD R27 , X
0009c8 2da0     +MOV R26 , R0
                 	__GETW2SX 90
0009c9 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x3F:
                +
0009ca 87ea     +STD Y + 10 , R30
0009cb 87fb     +STD Y + 10 + 1 , R31
0009cc 876c     +STD Y + 10 + 2 , R22
0009cd 877d     +STD Y + 10 + 3 , R23
                 	__PUTD1S 10
0009ce 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x40:
0009cf dfda      	RCALL SUBOPT_0x3A
0009d0 cfe0      	RJMP SUBOPT_0x3B
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:7 WORDS
                 SUBOPT_0x41:
                +
0009d1 85ea     +LDD R30 , Y + 10
0009d2 85fb     +LDD R31 , Y + 10 + 1
0009d3 856c     +LDD R22 , Y + 10 + 2
0009d4 857d     +LDD R23 , Y + 10 + 3
                 	__GETD1S 10
0009d5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x42:
0009d6 87ee      	STD  Y+14,R30
0009d7 87ff      	STD  Y+14+1,R31
0009d8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x43:
0009d9 85ae      	LDD  R26,Y+14
0009da 85bf      	LDD  R27,Y+14+1
0009db da5c      	RCALL _strlen
0009dc 2f1e      	MOV  R17,R30
0009dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x44:
0009de dfe4      	RCALL SUBOPT_0x3E
0009df 9614      	ADIW R26,4
0009e0 d28c      	RCALL __GETW1P
0009e1 cff4      	RJMP SUBOPT_0x42
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x45:
                +
0009e2 8be8     +STD Y + 16 , R30
0009e3 8bf9     +STD Y + 16 + 1 , R31
0009e4 8b6a     +STD Y + 16 + 2 , R22
0009e5 8b7b     +STD Y + 16 + 3 , R23
                 	__PUTD1S 16
0009e6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x46:
0009e7 7f0b      	ANDI R16,LOW(251)
0009e8 89ed      	LDD  R30,Y+21
0009e9 93ea      	ST   -Y,R30
                +
0009ea 01de     +MOVW R26 , R28
0009eb 5aa9     +SUBI R26 , LOW ( - 87 )
0009ec 4fbf     +SBCI R27 , HIGH ( - 87 )
0009ed 900d     +LD R0 , X +
0009ee 91bc     +LD R27 , X
0009ef 2da0     +MOV R26 , R0
                 	__GETW2SX 87
                +
0009f0 01fe     +MOVW R30 , R28
0009f1 5ae7     +SUBI R30 , LOW ( - 89 )
0009f2 4fff     +SBCI R31 , HIGH ( - 89 )
0009f3 9001     +LD R0 , Z +
0009f4 81f0     +LD R31 , Z
0009f5 2de0     +MOV R30 , R0
                 	__GETW1SX 89
0009f6 9509      	ICALL
0009f7 3050      	CPI  R21,0
0009f8 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x47:
                +
0009f9 89e8     +LDD R30 , Y + 16
0009fa 89f9     +LDD R31 , Y + 16 + 1
0009fb 896a     +LDD R22 , Y + 16 + 2
0009fc 897b     +LDD R23 , Y + 16 + 3
                 	__GETD1S 16
                +
0009fd 85aa     +LDD R26 , Y + 10
0009fe 85bb     +LDD R27 , Y + 10 + 1
0009ff 858c     +LDD R24 , Y + 10 + 2
000a00 859d     +LDD R25 , Y + 10 + 3
                 	__GETD2S 10
000a01 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x48:
                +
000a02 89a8     +LDD R26 , Y + 16
000a03 89b9     +LDD R27 , Y + 16 + 1
000a04 898a     +LDD R24 , Y + 16 + 2
000a05 899b     +LDD R25 , Y + 16 + 3
                 	__GETD2S 16
000a06 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000a07 9610      	adiw r26,0
000a08 f039      	breq __delay_ms1
                 __delay_ms0:
000a09 95a8      	wdr
                +
000a0a ec8d     +LDI R24 , LOW ( 0xACD )
000a0b e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
000a0c 9701     +SBIW R24 , 1
000a0d f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
000a0e 9711      	sbiw r26,1
000a0f f7c9      	brne __delay_ms0
                 __delay_ms1:
000a10 9508      	ret
                 
                 __ANEGF1:
000a11 9730      	SBIW R30,0
000a12 4060      	SBCI R22,0
000a13 4070      	SBCI R23,0
000a14 f009      	BREQ __ANEGF10
000a15 5870      	SUBI R23,0x80
                 __ANEGF10:
000a16 9508      	RET
                 
                 __ROUND_REPACK:
000a17 2355      	TST  R21
000a18 f442      	BRPL __REPACK
000a19 3850      	CPI  R21,0x80
000a1a f411      	BRNE __ROUND_REPACK0
000a1b ffe0      	SBRS R30,0
000a1c c004      	RJMP __REPACK
                 __ROUND_REPACK0:
000a1d 9631      	ADIW R30,1
000a1e 1f69      	ADC  R22,R25
000a1f 1f79      	ADC  R23,R25
000a20 f06b      	BRVS __REPACK1
                 
                 __REPACK:
000a21 e850      	LDI  R21,0x80
000a22 2757      	EOR  R21,R23
000a23 f411      	BRNE __REPACK0
000a24 935f      	PUSH R21
000a25 c0cf      	RJMP __ZERORES
                 __REPACK0:
000a26 3f5f      	CPI  R21,0xFF
000a27 f031      	BREQ __REPACK1
000a28 0f66      	LSL  R22
000a29 0c00      	LSL  R0
000a2a 9557      	ROR  R21
000a2b 9567      	ROR  R22
000a2c 2f75      	MOV  R23,R21
000a2d 9508      	RET
                 __REPACK1:
000a2e 935f      	PUSH R21
000a2f 2000      	TST  R0
000a30 f00a      	BRMI __REPACK2
000a31 c0cf      	RJMP __MAXRES
                 __REPACK2:
000a32 c0c8      	RJMP __MINRES
                 
                 __UNPACK:
000a33 e850      	LDI  R21,0x80
000a34 2e19      	MOV  R1,R25
000a35 2215      	AND  R1,R21
000a36 0f88      	LSL  R24
000a37 1f99      	ROL  R25
000a38 2795      	EOR  R25,R21
000a39 0f55      	LSL  R21
000a3a 9587      	ROR  R24
                 
                 __UNPACK1:
000a3b e850      	LDI  R21,0x80
000a3c 2e07      	MOV  R0,R23
000a3d 2205      	AND  R0,R21
000a3e 0f66      	LSL  R22
000a3f 1f77      	ROL  R23
000a40 2775      	EOR  R23,R21
000a41 0f55      	LSL  R21
000a42 9567      	ROR  R22
000a43 9508      	RET
                 
                 __CFD1U:
000a44 9468      	SET
000a45 c001      	RJMP __CFD1U0
                 __CFD1:
000a46 94e8      	CLT
                 __CFD1U0:
000a47 935f      	PUSH R21
000a48 dff2      	RCALL __UNPACK1
000a49 3870      	CPI  R23,0x80
000a4a f018      	BRLO __CFD10
000a4b 3f7f      	CPI  R23,0xFF
000a4c f408      	BRCC __CFD10
000a4d c0a7      	RJMP __ZERORES
                 __CFD10:
000a4e e156      	LDI  R21,22
000a4f 1b57      	SUB  R21,R23
000a50 f4aa      	BRPL __CFD11
000a51 9551      	NEG  R21
000a52 3058      	CPI  R21,8
000a53 f40e      	BRTC __CFD19
000a54 3059      	CPI  R21,9
                 __CFD19:
000a55 f030      	BRLO __CFD17
000a56 efef      	SER  R30
000a57 efff      	SER  R31
000a58 ef6f      	SER  R22
000a59 e77f      	LDI  R23,0x7F
000a5a f977      	BLD  R23,7
000a5b c01a      	RJMP __CFD15
                 __CFD17:
000a5c 2777      	CLR  R23
000a5d 2355      	TST  R21
000a5e f0b9      	BREQ __CFD15
                 __CFD18:
000a5f 0fee      	LSL  R30
000a60 1fff      	ROL  R31
000a61 1f66      	ROL  R22
000a62 1f77      	ROL  R23
000a63 955a      	DEC  R21
000a64 f7d1      	BRNE __CFD18
000a65 c010      	RJMP __CFD15
                 __CFD11:
000a66 2777      	CLR  R23
                 __CFD12:
000a67 3058      	CPI  R21,8
000a68 f028      	BRLO __CFD13
000a69 2fef      	MOV  R30,R31
000a6a 2ff6      	MOV  R31,R22
000a6b 2f67      	MOV  R22,R23
000a6c 5058      	SUBI R21,8
000a6d cff9      	RJMP __CFD12
                 __CFD13:
000a6e 2355      	TST  R21
000a6f f031      	BREQ __CFD15
                 __CFD14:
000a70 9576      	LSR  R23
000a71 9567      	ROR  R22
000a72 95f7      	ROR  R31
000a73 95e7      	ROR  R30
000a74 955a      	DEC  R21
000a75 f7d1      	BRNE __CFD14
                 __CFD15:
000a76 2000      	TST  R0
000a77 f40a      	BRPL __CFD16
000a78 d145      	RCALL __ANEGD1
                 __CFD16:
000a79 915f      	POP  R21
000a7a 9508      	RET
                 
                 __CDF1U:
000a7b 9468      	SET
000a7c c001      	RJMP __CDF1U0
                 __CDF1:
000a7d 94e8      	CLT
                 __CDF1U0:
000a7e 9730      	SBIW R30,0
000a7f 4060      	SBCI R22,0
000a80 4070      	SBCI R23,0
000a81 f0b1      	BREQ __CDF10
000a82 2400      	CLR  R0
000a83 f026      	BRTS __CDF11
000a84 2377      	TST  R23
000a85 f412      	BRPL __CDF11
000a86 9400      	COM  R0
000a87 d136      	RCALL __ANEGD1
                 __CDF11:
000a88 2e17      	MOV  R1,R23
000a89 e17e      	LDI  R23,30
000a8a 2011      	TST  R1
                 __CDF12:
000a8b f032      	BRMI __CDF13
000a8c 957a      	DEC  R23
000a8d 0fee      	LSL  R30
000a8e 1fff      	ROL  R31
000a8f 1f66      	ROL  R22
000a90 1c11      	ROL  R1
000a91 cff9      	RJMP __CDF12
                 __CDF13:
000a92 2fef      	MOV  R30,R31
000a93 2ff6      	MOV  R31,R22
000a94 2d61      	MOV  R22,R1
000a95 935f      	PUSH R21
000a96 df8a      	RCALL __REPACK
000a97 915f      	POP  R21
                 __CDF10:
000a98 9508      	RET
                 
                 __SWAPACC:
000a99 934f      	PUSH R20
000a9a 01af      	MOVW R20,R30
000a9b 01fd      	MOVW R30,R26
000a9c 01da      	MOVW R26,R20
000a9d 01ab      	MOVW R20,R22
000a9e 01bc      	MOVW R22,R24
000a9f 01ca      	MOVW R24,R20
000aa0 2d40      	MOV  R20,R0
000aa1 2c01      	MOV  R0,R1
000aa2 2e14      	MOV  R1,R20
000aa3 914f      	POP  R20
000aa4 9508      	RET
                 
                 __UADD12:
000aa5 0fea      	ADD  R30,R26
000aa6 1ffb      	ADC  R31,R27
000aa7 1f68      	ADC  R22,R24
000aa8 9508      	RET
                 
                 __NEGMAN1:
000aa9 95e0      	COM  R30
000aaa 95f0      	COM  R31
000aab 9560      	COM  R22
000aac 5fef      	SUBI R30,-1
000aad 4fff      	SBCI R31,-1
000aae 4f6f      	SBCI R22,-1
000aaf 9508      	RET
                 
                 __SUBF12:
000ab0 935f      	PUSH R21
000ab1 df81      	RCALL __UNPACK
000ab2 3890      	CPI  R25,0x80
000ab3 f171      	BREQ __ADDF129
000ab4 e850      	LDI  R21,0x80
000ab5 2615      	EOR  R1,R21
                 
000ab6 c004      	RJMP __ADDF120
                 
                 __ADDF12:
000ab7 935f      	PUSH R21
000ab8 df7a      	RCALL __UNPACK
000ab9 3890      	CPI  R25,0x80
000aba f139      	BREQ __ADDF129
                 
                 __ADDF120:
000abb 3870      	CPI  R23,0x80
000abc f121      	BREQ __ADDF128
                 __ADDF121:
000abd 2f57      	MOV  R21,R23
000abe 1b59      	SUB  R21,R25
000abf f12b      	BRVS __ADDF1211
000ac0 f412      	BRPL __ADDF122
000ac1 dfd7      	RCALL __SWAPACC
000ac2 cffa      	RJMP __ADDF121
                 __ADDF122:
000ac3 3158      	CPI  R21,24
000ac4 f018      	BRLO __ADDF123
000ac5 27aa      	CLR  R26
000ac6 27bb      	CLR  R27
000ac7 2788      	CLR  R24
                 __ADDF123:
000ac8 3058      	CPI  R21,8
000ac9 f028      	BRLO __ADDF124
000aca 2fab      	MOV  R26,R27
000acb 2fb8      	MOV  R27,R24
000acc 2788      	CLR  R24
000acd 5058      	SUBI R21,8
000ace cff9      	RJMP __ADDF123
                 __ADDF124:
000acf 2355      	TST  R21
000ad0 f029      	BREQ __ADDF126
                 __ADDF125:
000ad1 9586      	LSR  R24
000ad2 95b7      	ROR  R27
000ad3 95a7      	ROR  R26
000ad4 955a      	DEC  R21
000ad5 f7d9      	BRNE __ADDF125
                 __ADDF126:
000ad6 2d50      	MOV  R21,R0
000ad7 2551      	EOR  R21,R1
000ad8 f072      	BRMI __ADDF127
000ad9 dfcb      	RCALL __UADD12
000ada f438      	BRCC __ADDF129
000adb 9567      	ROR  R22
000adc 95f7      	ROR  R31
000add 95e7      	ROR  R30
000ade 9573      	INC  R23
000adf f413      	BRVC __ADDF129
000ae0 c020      	RJMP __MAXRES
                 __ADDF128:
000ae1 dfb7      	RCALL __SWAPACC
                 __ADDF129:
000ae2 df3e      	RCALL __REPACK
000ae3 915f      	POP  R21
000ae4 9508      	RET
                 __ADDF1211:
000ae5 f7d8      	BRCC __ADDF128
000ae6 cffb      	RJMP __ADDF129
                 __ADDF127:
000ae7 1bea      	SUB  R30,R26
000ae8 0bfb      	SBC  R31,R27
000ae9 0b68      	SBC  R22,R24
000aea f051      	BREQ __ZERORES
000aeb f410      	BRCC __ADDF1210
000aec 9400      	COM  R0
000aed dfbb      	RCALL __NEGMAN1
                 __ADDF1210:
000aee 2366      	TST  R22
000aef f392      	BRMI __ADDF129
000af0 0fee      	LSL  R30
000af1 1fff      	ROL  R31
000af2 1f66      	ROL  R22
000af3 957a      	DEC  R23
000af4 f7cb      	BRVC __ADDF1210
                 
                 __ZERORES:
000af5 27ee      	CLR  R30
000af6 27ff      	CLR  R31
000af7 2766      	CLR  R22
000af8 2777      	CLR  R23
000af9 915f      	POP  R21
000afa 9508      	RET
                 
                 __MINRES:
000afb efef      	SER  R30
000afc efff      	SER  R31
000afd e76f      	LDI  R22,0x7F
000afe ef7f      	SER  R23
000aff 915f      	POP  R21
000b00 9508      	RET
                 
                 __MAXRES:
000b01 efef      	SER  R30
000b02 efff      	SER  R31
000b03 e76f      	LDI  R22,0x7F
000b04 e77f      	LDI  R23,0x7F
000b05 915f      	POP  R21
000b06 9508      	RET
                 
                 __MULF12:
000b07 935f      	PUSH R21
000b08 df2a      	RCALL __UNPACK
000b09 3870      	CPI  R23,0x80
000b0a f351      	BREQ __ZERORES
000b0b 3890      	CPI  R25,0x80
000b0c f341      	BREQ __ZERORES
000b0d 2401      	EOR  R0,R1
000b0e 9408      	SEC
000b0f 1f79      	ADC  R23,R25
000b10 f423      	BRVC __MULF124
000b11 f31c      	BRLT __ZERORES
                 __MULF125:
000b12 2000      	TST  R0
000b13 f33a      	BRMI __MINRES
000b14 cfec      	RJMP __MAXRES
                 __MULF124:
000b15 920f      	PUSH R0
000b16 931f      	PUSH R17
000b17 932f      	PUSH R18
000b18 933f      	PUSH R19
000b19 934f      	PUSH R20
000b1a 2711      	CLR  R17
000b1b 2722      	CLR  R18
000b1c 2799      	CLR  R25
000b1d 9f68      	MUL  R22,R24
000b1e 01a0      	MOVW R20,R0
000b1f 9f8f      	MUL  R24,R31
000b20 2d30      	MOV  R19,R0
000b21 0d41      	ADD  R20,R1
000b22 1f59      	ADC  R21,R25
000b23 9f6b      	MUL  R22,R27
000b24 0d30      	ADD  R19,R0
000b25 1d41      	ADC  R20,R1
000b26 1f59      	ADC  R21,R25
000b27 9f8e      	MUL  R24,R30
000b28 d027      	RCALL __MULF126
000b29 9fbf      	MUL  R27,R31
000b2a d025      	RCALL __MULF126
000b2b 9f6a      	MUL  R22,R26
000b2c d023      	RCALL __MULF126
000b2d 9fbe      	MUL  R27,R30
000b2e d01d      	RCALL __MULF127
000b2f 9faf      	MUL  R26,R31
000b30 d01b      	RCALL __MULF127
000b31 9fae      	MUL  R26,R30
000b32 0d11      	ADD  R17,R1
000b33 1f29      	ADC  R18,R25
000b34 1f39      	ADC  R19,R25
000b35 1f49      	ADC  R20,R25
000b36 1f59      	ADC  R21,R25
000b37 2fe3      	MOV  R30,R19
000b38 2ff4      	MOV  R31,R20
000b39 2f65      	MOV  R22,R21
000b3a 2f52      	MOV  R21,R18
000b3b 914f      	POP  R20
000b3c 913f      	POP  R19
000b3d 912f      	POP  R18
000b3e 911f      	POP  R17
000b3f 900f      	POP  R0
000b40 2366      	TST  R22
000b41 f02a      	BRMI __MULF122
000b42 0f55      	LSL  R21
000b43 1fee      	ROL  R30
000b44 1fff      	ROL  R31
000b45 1f66      	ROL  R22
000b46 c002      	RJMP __MULF123
                 __MULF122:
000b47 9573      	INC  R23
000b48 f24b      	BRVS __MULF125
                 __MULF123:
000b49 decd      	RCALL __ROUND_REPACK
000b4a 915f      	POP  R21
000b4b 9508      	RET
                 
                 __MULF127:
000b4c 0d10      	ADD  R17,R0
000b4d 1d21      	ADC  R18,R1
000b4e 1f39      	ADC  R19,R25
000b4f c002      	RJMP __MULF128
                 __MULF126:
000b50 0d20      	ADD  R18,R0
000b51 1d31      	ADC  R19,R1
                 __MULF128:
000b52 1f49      	ADC  R20,R25
000b53 1f59      	ADC  R21,R25
000b54 9508      	RET
                 
                 __DIVF21:
000b55 935f      	PUSH R21
000b56 dedc      	RCALL __UNPACK
000b57 3870      	CPI  R23,0x80
000b58 f421      	BRNE __DIVF210
000b59 2011      	TST  R1
                 __DIVF211:
000b5a f40a      	BRPL __DIVF219
000b5b cf9f      	RJMP __MINRES
                 __DIVF219:
000b5c cfa4      	RJMP __MAXRES
                 __DIVF210:
000b5d 3890      	CPI  R25,0x80
000b5e f409      	BRNE __DIVF218
                 __DIVF217:
000b5f cf95      	RJMP __ZERORES
                 __DIVF218:
000b60 2401      	EOR  R0,R1
000b61 9408      	SEC
000b62 0b97      	SBC  R25,R23
000b63 f41b      	BRVC __DIVF216
000b64 f3d4      	BRLT __DIVF217
000b65 2000      	TST  R0
000b66 cff3      	RJMP __DIVF211
                 __DIVF216:
000b67 2f79      	MOV  R23,R25
000b68 931f      	PUSH R17
000b69 932f      	PUSH R18
000b6a 933f      	PUSH R19
000b6b 934f      	PUSH R20
000b6c 2411      	CLR  R1
000b6d 2711      	CLR  R17
000b6e 2722      	CLR  R18
000b6f 2733      	CLR  R19
000b70 2744      	CLR  R20
000b71 2755      	CLR  R21
000b72 e290      	LDI  R25,32
                 __DIVF212:
000b73 17ae      	CP   R26,R30
000b74 07bf      	CPC  R27,R31
000b75 0786      	CPC  R24,R22
000b76 0741      	CPC  R20,R17
000b77 f030      	BRLO __DIVF213
000b78 1bae      	SUB  R26,R30
000b79 0bbf      	SBC  R27,R31
000b7a 0b86      	SBC  R24,R22
000b7b 0b41      	SBC  R20,R17
000b7c 9408      	SEC
000b7d c001      	RJMP __DIVF214
                 __DIVF213:
000b7e 9488      	CLC
                 __DIVF214:
000b7f 1f55      	ROL  R21
000b80 1f22      	ROL  R18
000b81 1f33      	ROL  R19
000b82 1c11      	ROL  R1
000b83 1faa      	ROL  R26
000b84 1fbb      	ROL  R27
000b85 1f88      	ROL  R24
000b86 1f44      	ROL  R20
000b87 959a      	DEC  R25
000b88 f751      	BRNE __DIVF212
000b89 01f9      	MOVW R30,R18
000b8a 2d61      	MOV  R22,R1
000b8b 914f      	POP  R20
000b8c 913f      	POP  R19
000b8d 912f      	POP  R18
000b8e 911f      	POP  R17
000b8f 2366      	TST  R22
000b90 f032      	BRMI __DIVF215
000b91 0f55      	LSL  R21
000b92 1fee      	ROL  R30
000b93 1fff      	ROL  R31
000b94 1f66      	ROL  R22
000b95 957a      	DEC  R23
000b96 f243      	BRVS __DIVF217
                 __DIVF215:
000b97 de7f      	RCALL __ROUND_REPACK
000b98 915f      	POP  R21
000b99 9508      	RET
                 
                 __CMPF12:
000b9a 2399      	TST  R25
000b9b f09a      	BRMI __CMPF120
000b9c 2377      	TST  R23
000b9d f042      	BRMI __CMPF121
000b9e 1797      	CP   R25,R23
000b9f f048      	BRLO __CMPF122
000ba0 f429      	BRNE __CMPF121
000ba1 17ae      	CP   R26,R30
000ba2 07bf      	CPC  R27,R31
000ba3 0786      	CPC  R24,R22
000ba4 f020      	BRLO __CMPF122
000ba5 f031      	BREQ __CMPF123
                 __CMPF121:
000ba6 9498      	CLZ
000ba7 9488      	CLC
000ba8 9508      	RET
                 __CMPF122:
000ba9 9498      	CLZ
000baa 9408      	SEC
000bab 9508      	RET
                 __CMPF123:
000bac 9418      	SEZ
000bad 9488      	CLC
000bae 9508      	RET
                 __CMPF120:
000baf 2377      	TST  R23
000bb0 f7c2      	BRPL __CMPF122
000bb1 1797      	CP   R25,R23
000bb2 f398      	BRLO __CMPF121
000bb3 f7a9      	BRNE __CMPF122
000bb4 17ea      	CP   R30,R26
000bb5 07fb      	CPC  R31,R27
000bb6 0768      	CPC  R22,R24
000bb7 f388      	BRLO __CMPF122
000bb8 f399      	BREQ __CMPF123
000bb9 cfec      	RJMP __CMPF121
                 
                 __ADDW2R15:
000bba 2400      	CLR  R0
000bbb 0daf      	ADD  R26,R15
000bbc 1db0      	ADC  R27,R0
000bbd 9508      	RET
                 
                 __ANEGD1:
000bbe 95f0      	COM  R31
000bbf 9560      	COM  R22
000bc0 9570      	COM  R23
000bc1 95e1      	NEG  R30
000bc2 4fff      	SBCI R31,-1
000bc3 4f6f      	SBCI R22,-1
000bc4 4f7f      	SBCI R23,-1
000bc5 9508      	RET
                 
                 __CBD1:
000bc6 2ffe      	MOV  R31,R30
000bc7 0fff      	ADD  R31,R31
000bc8 0bff      	SBC  R31,R31
000bc9 2f6f      	MOV  R22,R31
000bca 2f7f      	MOV  R23,R31
000bcb 9508      	RET
                 
                 __CWD1:
000bcc 2f6f      	MOV  R22,R31
000bcd 0f66      	ADD  R22,R22
000bce 0b66      	SBC  R22,R22
000bcf 2f76      	MOV  R23,R22
000bd0 9508      	RET
                 
                 __CWD2:
000bd1 2f8b      	MOV  R24,R27
000bd2 0f88      	ADD  R24,R24
000bd3 0b88      	SBC  R24,R24
000bd4 2f98      	MOV  R25,R24
000bd5 9508      	RET
                 
                 __EQB12:
000bd6 17ea      	CP   R30,R26
000bd7 e0e1      	LDI  R30,1
000bd8 f009      	BREQ __EQB12T
000bd9 27ee      	CLR  R30
                 __EQB12T:
000bda 9508      	RET
                 
                 __MULD12U:
000bdb 9f7a      	MUL  R23,R26
000bdc 2d70      	MOV  R23,R0
000bdd 9f6b      	MUL  R22,R27
000bde 0d70      	ADD  R23,R0
000bdf 9ff8      	MUL  R31,R24
000be0 0d70      	ADD  R23,R0
000be1 9fe9      	MUL  R30,R25
000be2 0d70      	ADD  R23,R0
000be3 9f6a      	MUL  R22,R26
000be4 2d60      	MOV  R22,R0
000be5 0d71      	ADD  R23,R1
000be6 9ffb      	MUL  R31,R27
000be7 0d60      	ADD  R22,R0
000be8 1d71      	ADC  R23,R1
000be9 9fe8      	MUL  R30,R24
000bea 0d60      	ADD  R22,R0
000beb 1d71      	ADC  R23,R1
000bec 2788      	CLR  R24
000bed 9ffa      	MUL  R31,R26
000bee 2df0      	MOV  R31,R0
000bef 0d61      	ADD  R22,R1
000bf0 1f78      	ADC  R23,R24
000bf1 9feb      	MUL  R30,R27
000bf2 0df0      	ADD  R31,R0
000bf3 1d61      	ADC  R22,R1
000bf4 1f78      	ADC  R23,R24
000bf5 9fea      	MUL  R30,R26
000bf6 2de0      	MOV  R30,R0
000bf7 0df1      	ADD  R31,R1
000bf8 1f68      	ADC  R22,R24
000bf9 1f78      	ADC  R23,R24
000bfa 9508      	RET
                 
                 __MULB1W2U:
000bfb 2f6e      	MOV  R22,R30
000bfc 9f6a      	MUL  R22,R26
000bfd 01f0      	MOVW R30,R0
000bfe 9f6b      	MUL  R22,R27
000bff 0df0      	ADD  R31,R0
000c00 9508      	RET
                 
                 __MULD12:
000c01 d058      	RCALL __CHKSIGND
000c02 dfd8      	RCALL __MULD12U
000c03 f40e      	BRTC __MULD121
000c04 dfb9      	RCALL __ANEGD1
                 __MULD121:
000c05 9508      	RET
                 
                 __DIVB21U:
000c06 2400      	CLR  R0
000c07 e098      	LDI  R25,8
                 __DIVB21U1:
000c08 0faa      	LSL  R26
000c09 1c00      	ROL  R0
000c0a 1a0e      	SUB  R0,R30
000c0b f410      	BRCC __DIVB21U2
000c0c 0e0e      	ADD  R0,R30
000c0d c001      	RJMP __DIVB21U3
                 __DIVB21U2:
000c0e 60a1      	SBR  R26,1
                 __DIVB21U3:
000c0f 959a      	DEC  R25
000c10 f7b9      	BRNE __DIVB21U1
000c11 2fea      	MOV  R30,R26
000c12 2da0      	MOV  R26,R0
000c13 9508      	RET
                 
                 __DIVB21:
000c14 d039      	RCALL __CHKSIGNB
000c15 dff0      	RCALL __DIVB21U
000c16 f40e      	BRTC __DIVB211
000c17 95e1      	NEG  R30
                 __DIVB211:
000c18 9508      	RET
                 
                 __DIVD21U:
000c19 933f      	PUSH R19
000c1a 934f      	PUSH R20
000c1b 935f      	PUSH R21
000c1c 2400      	CLR  R0
000c1d 2411      	CLR  R1
000c1e 2744      	CLR  R20
000c1f 2755      	CLR  R21
000c20 e230      	LDI  R19,32
                 __DIVD21U1:
000c21 0faa      	LSL  R26
000c22 1fbb      	ROL  R27
000c23 1f88      	ROL  R24
000c24 1f99      	ROL  R25
000c25 1c00      	ROL  R0
000c26 1c11      	ROL  R1
000c27 1f44      	ROL  R20
000c28 1f55      	ROL  R21
000c29 1a0e      	SUB  R0,R30
000c2a 0a1f      	SBC  R1,R31
000c2b 0b46      	SBC  R20,R22
000c2c 0b57      	SBC  R21,R23
000c2d f428      	BRCC __DIVD21U2
000c2e 0e0e      	ADD  R0,R30
000c2f 1e1f      	ADC  R1,R31
000c30 1f46      	ADC  R20,R22
000c31 1f57      	ADC  R21,R23
000c32 c001      	RJMP __DIVD21U3
                 __DIVD21U2:
000c33 60a1      	SBR  R26,1
                 __DIVD21U3:
000c34 953a      	DEC  R19
000c35 f759      	BRNE __DIVD21U1
000c36 01fd      	MOVW R30,R26
000c37 01bc      	MOVW R22,R24
000c38 01d0      	MOVW R26,R0
000c39 01ca      	MOVW R24,R20
000c3a 915f      	POP  R21
000c3b 914f      	POP  R20
000c3c 913f      	POP  R19
000c3d 9508      	RET
                 
                 __MODB21:
000c3e 94e8      	CLT
000c3f ffa7      	SBRS R26,7
000c40 c002      	RJMP __MODB211
000c41 95a1      	NEG  R26
000c42 9468      	SET
                 __MODB211:
000c43 fde7      	SBRC R30,7
000c44 95e1      	NEG  R30
000c45 dfc0      	RCALL __DIVB21U
000c46 2fea      	MOV  R30,R26
000c47 f40e      	BRTC __MODB212
000c48 95e1      	NEG  R30
                 __MODB212:
000c49 9508      	RET
                 
                 __MODD21U:
000c4a dfce      	RCALL __DIVD21U
000c4b 01fd      	MOVW R30,R26
000c4c 01bc      	MOVW R22,R24
000c4d 9508      	RET
                 
                 __CHKSIGNB:
000c4e 94e8      	CLT
000c4f ffe7      	SBRS R30,7
000c50 c002      	RJMP __CHKSB1
000c51 95e1      	NEG  R30
000c52 9468      	SET
                 __CHKSB1:
000c53 ffa7      	SBRS R26,7
000c54 c004      	RJMP __CHKSB2
000c55 95a1      	NEG  R26
000c56 f800      	BLD  R0,0
000c57 9403      	INC  R0
000c58 fa00      	BST  R0,0
                 __CHKSB2:
000c59 9508      	RET
                 
                 __CHKSIGND:
000c5a 94e8      	CLT
000c5b ff77      	SBRS R23,7
000c5c c002      	RJMP __CHKSD1
000c5d df60      	RCALL __ANEGD1
000c5e 9468      	SET
                 __CHKSD1:
000c5f ff97      	SBRS R25,7
000c60 c00b      	RJMP __CHKSD2
000c61 2400      	CLR  R0
000c62 95a0      	COM  R26
000c63 95b0      	COM  R27
000c64 9580      	COM  R24
000c65 9590      	COM  R25
000c66 9611      	ADIW R26,1
000c67 1d80      	ADC  R24,R0
000c68 1d90      	ADC  R25,R0
000c69 f800      	BLD  R0,0
000c6a 9403      	INC  R0
000c6b fa00      	BST  R0,0
                 __CHKSD2:
000c6c 9508      	RET
                 
                 __GETW1P:
000c6d 91ed      	LD   R30,X+
000c6e 91fc      	LD   R31,X
000c6f 9711      	SBIW R26,1
000c70 9508      	RET
                 
                 __GETD1P:
000c71 91ed      	LD   R30,X+
000c72 91fd      	LD   R31,X+
000c73 916d      	LD   R22,X+
000c74 917c      	LD   R23,X
000c75 9713      	SBIW R26,3
000c76 9508      	RET
                 
                 __GETD1P_INC:
000c77 91ed      	LD   R30,X+
000c78 91fd      	LD   R31,X+
000c79 916d      	LD   R22,X+
000c7a 917d      	LD   R23,X+
000c7b 9508      	RET
                 
                 __PUTDP1_DEC:
000c7c 937e      	ST   -X,R23
000c7d 936e      	ST   -X,R22
000c7e 93fe      	ST   -X,R31
000c7f 93ee      	ST   -X,R30
000c80 9508      	RET
                 
                 __GETD1S0:
000c81 81e8      	LD   R30,Y
000c82 81f9      	LDD  R31,Y+1
000c83 816a      	LDD  R22,Y+2
000c84 817b      	LDD  R23,Y+3
000c85 9508      	RET
                 
                 __GETD2S0:
000c86 81a8      	LD   R26,Y
000c87 81b9      	LDD  R27,Y+1
000c88 818a      	LDD  R24,Y+2
000c89 819b      	LDD  R25,Y+3
000c8a 9508      	RET
                 
                 __PUTD1S0:
000c8b 83e8      	ST   Y,R30
000c8c 83f9      	STD  Y+1,R31
000c8d 836a      	STD  Y+2,R22
000c8e 837b      	STD  Y+3,R23
000c8f 9508      	RET
                 
                 __PUTPARD1:
000c90 937a      	ST   -Y,R23
000c91 936a      	ST   -Y,R22
000c92 93fa      	ST   -Y,R31
000c93 93ea      	ST   -Y,R30
000c94 9508      	RET
                 
                 __PUTPARD2:
000c95 939a      	ST   -Y,R25
000c96 938a      	ST   -Y,R24
000c97 93ba      	ST   -Y,R27
000c98 93aa      	ST   -Y,R26
000c99 9508      	RET
                 
                 __CDF2U:
000c9a 9468      	SET
000c9b c001      	RJMP __CDF2U0
                 __CDF2:
000c9c 94e8      	CLT
                 __CDF2U0:
000c9d d001      	RCALL __SWAPD12
000c9e dddf      	RCALL __CDF1U0
                 
                 __SWAPD12:
000c9f 2e18      	MOV  R1,R24
000ca0 2f86      	MOV  R24,R22
000ca1 2d61      	MOV  R22,R1
000ca2 2e19      	MOV  R1,R25
000ca3 2f97      	MOV  R25,R23
000ca4 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
000ca5 2e1b      	MOV  R1,R27
000ca6 2fbf      	MOV  R27,R31
000ca7 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000ca8 2e1a      	MOV  R1,R26
000ca9 2fae      	MOV  R26,R30
000caa 2de1      	MOV  R30,R1
000cab 9508      	RET
                 
                 __CPD10:
000cac 9730      	SBIW R30,0
000cad 4060      	SBCI R22,0
000cae 4070      	SBCI R23,0
000caf 9508      	RET
                 
                 __CPW02:
000cb0 2400      	CLR  R0
000cb1 160a      	CP   R0,R26
000cb2 060b      	CPC  R0,R27
000cb3 9508      	RET
                 
                 __SAVELOCR6:
000cb4 935a      	ST   -Y,R21
                 __SAVELOCR5:
000cb5 934a      	ST   -Y,R20
                 __SAVELOCR4:
000cb6 933a      	ST   -Y,R19
                 __SAVELOCR3:
000cb7 932a      	ST   -Y,R18
                 __SAVELOCR2:
000cb8 931a      	ST   -Y,R17
000cb9 930a      	ST   -Y,R16
000cba 9508      	RET
                 
                 __LOADLOCR6:
000cbb 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
000cbc 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
000cbd 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
000cbe 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000cbf 8119      	LDD  R17,Y+1
000cc0 8108      	LD   R16,Y
000cc1 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega8 register use summary:
r0 :  83 r1 :  40 r2 :   3 r3 :   0 r4 :   4 r5 :   1 r6 :   4 r7 :   1 
r8 :   2 r9 :   2 r10:   3 r11:   1 r12:   2 r13:   1 r14:   0 r15:   4 
r16:  47 r17:  50 r18:  46 r19:  35 r20:  50 r21:  90 r22: 170 r23: 155 
r24:  99 r25:  77 r26: 240 r27: 114 r28:  32 r29:   1 r30: 525 r31: 225 
x  :  50 y  : 325 z  :  24 
Registers used: 33 out of 35 (94.3%)

ATmega8 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :  33 add   :  27 
adiw  :  38 and   :   5 andi  :   6 asr   :   0 bclr  :   0 bld   :   6 
brbc  :   0 brbs  :   0 brcc  :   9 brcs  :   2 break :   0 breq  :  51 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :  30 
brlt  :   5 brmi  :  10 brne  :  72 brpl  :   9 brsh  :   6 brtc  :   6 
brts  :   1 brvc  :   4 brvs  :   4 bset  :   0 bst   :   4 cbi   :   0 
cbr   :   1 clc   :   3 clh   :   0 cli   :   1 cln   :   0 clr   :  67 
cls   :   0 clt   :   9 clv   :   0 clz   :   2 com   :  14 cp    :  18 
cpc   :  27 cpi   :  91 cpse  :   0 dec   :  13 des   :   0 eor   :   7 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   3 ijmp  :   0 in    :  10 
inc   :   4 ld    :  79 ldd   : 163 ldi   : 264 lds   : 119 lpm   :  12 
lsl   :  17 lsr   :   3 mov   :  90 movw  :  56 mul   :  23 muls  :   0 
mulsu :   0 neg   :   9 nop   :   0 or    :   0 ori   :   9 out   :  51 
pop   :  22 push  :  22 rcall : 424 ret   : 140 reti  :   3 rjmp  : 184 
rol   :  35 ror   :  15 sbc   :  12 sbci  :  25 sbi   :   2 sbic  :   0 
sbis  :   2 sbiw  :  27 sbr   :   4 sbrc  :   4 sbrs  :  23 sec   :   5 
seh   :   0 sei   :   1 sen   :   0 ser   :   8 ses   :   0 set   :   8 
sev   :   0 sez   :   1 sleep :   0 spm   :   0 st    :  77 std   :  69 
sts   : 106 sub   :   7 subi  :  54 swap  :   0 tst   :  27 wdr   :   1 

Instructions used: 77 out of 114 (67.5%)

ATmega8 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x001984   6054    478   6532    8192  79.7%
[.dseg] 0x000060 0x000377      0    535    535    1024  52.2%
[.eseg] 0x000000 0x000000      0      0      0     512   0.0%

Assembly complete, 0 errors, 16 warnings
